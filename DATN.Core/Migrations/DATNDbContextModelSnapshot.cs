// <auto-generated />
using System;
using DATN.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DATN.Core.Migrations
{
    [DbContext(typeof(DATNDbContext))]
    partial class DATNDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DATN.Core.Model.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressID");

                    b.ToTable("Address", (string)null);

                    b.HasData(
                        new
                        {
                            AddressID = 1,
                            Description = "Hà Nội"
                        },
                        new
                        {
                            AddressID = 2,
                            Description = "Hồ Chí Minh"
                        },
                        new
                        {
                            AddressID = 3,
                            Description = "Đà Nẵng"
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("BrandId");

                    b.ToTable("Brand", (string)null);

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            ImageUrl = "/Images/Brand/Lg.png",
                            Name = "LG",
                            Status = true
                        },
                        new
                        {
                            BrandId = 2,
                            ImageUrl = "/Images/Brand/Samsung.png",
                            Name = "Samsung",
                            Status = true
                        },
                        new
                        {
                            BrandId = 3,
                            ImageUrl = "/Images/Brand/Toshiba.png",
                            Name = "Toshiba",
                            Status = true
                        },
                        new
                        {
                            BrandId = 4,
                            ImageUrl = "/Images/Brand/Sony.png",
                            Name = "Sony",
                            Status = true
                        },
                        new
                        {
                            BrandId = 5,
                            ImageUrl = "/Images/Brand/Aqua.png",
                            Name = "Aqua",
                            Status = true
                        },
                        new
                        {
                            BrandId = 6,
                            ImageUrl = "/Images/Brand/Xiaomi.png",
                            Name = "Xiaomi",
                            Status = true
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOnList")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8208),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8228),
                            Description = "",
                            ImageUrl = "/Images/Home/Luxury.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Hàng cao cấp",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8229)
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8235),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8235),
                            Description = "",
                            ImageUrl = "/Images/Home/Hot.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Tivi, Loa, dàn karaoke",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8236)
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8238),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8238),
                            Description = "",
                            ImageUrl = "/Images/Home/Hot.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Tủ lạnh, Tủ đông, Tủ mát",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8239)
                        },
                        new
                        {
                            Id = 4,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8241),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8242),
                            Description = "",
                            ImageUrl = "/Images/Home/Hot.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Máy giặt, Máy sấy quần áo",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8242)
                        },
                        new
                        {
                            Id = 5,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8244),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8245),
                            Description = "",
                            ImageUrl = "/Images/Home/Hot.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Máy lạnh, Máy nước nóng",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8245)
                        },
                        new
                        {
                            Id = 6,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8247),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8248),
                            Description = "",
                            ImageUrl = "/Images/Home/Icons-1.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Điện gia dụng, Sinh tố, Xay ép",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8248)
                        },
                        new
                        {
                            Id = 7,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8250),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8251),
                            Description = "",
                            ImageUrl = "/Images/Home//Hot.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Bếp điện, Nồi cơm, Đồ bếp",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8251)
                        },
                        new
                        {
                            Id = 8,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8254),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8255),
                            Description = "",
                            ImageUrl = "/Images/Home//Hot.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Máy lọc nước, Nồi chiên",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8255)
                        },
                        new
                        {
                            Id = 9,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8257),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8258),
                            Description = "",
                            ImageUrl = "/Images/Home/Icons-2.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Máy hút bụi, Máy rửa chén",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8258)
                        },
                        new
                        {
                            Id = 10,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8260),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8261),
                            Description = "",
                            ImageUrl = "/Images/Home/Icons-3.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Xe đạp, Sức khỏe, Làm đẹp",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8261)
                        },
                        new
                        {
                            Id = 11,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8263),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8264),
                            Description = "",
                            ImageUrl = "/Images/Home/Icons-4.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Đồ nghề - dụng cụ sửa chữa",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8264)
                        },
                        new
                        {
                            Id = 12,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8266),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8266),
                            Description = "",
                            ImageUrl = "/Images/Home/Icons-5.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Điện thoại, Laptop, Tablet",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8267)
                        },
                        new
                        {
                            Id = 13,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8269),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8270),
                            Description = "",
                            ImageUrl = "/Images/Home/Icons-6.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Phụ kiện, Camera, Đồng hồ",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8270)
                        },
                        new
                        {
                            Id = 14,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8272),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8273),
                            Description = "",
                            ImageUrl = "/Images/Home/Icons-7.png",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 0,
                            Name = "Máy cũ, Dịch vụ hữu ích",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8273)
                        },
                        new
                        {
                            Id = 15,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8275),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8275),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 1,
                            Name = "Tivi",
                            ParentCategoryId = 2,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8276)
                        },
                        new
                        {
                            Id = 16,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8283),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8283),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 1,
                            Name = "Loa",
                            ParentCategoryId = 2,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8284)
                        },
                        new
                        {
                            Id = 17,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8286),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8287),
                            Description = "",
                            IsOnList = true,
                            IsVisible = false,
                            Level = 1,
                            Name = "Phụ kiện Tivi",
                            ParentCategoryId = 2,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8287)
                        },
                        new
                        {
                            Id = 18,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8289),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8289),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 1,
                            Name = "Tủ lạnh",
                            ParentCategoryId = 3,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8290)
                        },
                        new
                        {
                            Id = 19,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8292),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8292),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 1,
                            Name = "Tủ đông",
                            ParentCategoryId = 3,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8293)
                        },
                        new
                        {
                            Id = 20,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8295),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8295),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 1,
                            Name = "Tủ mát",
                            ParentCategoryId = 3,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8296)
                        },
                        new
                        {
                            Id = 21,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8298),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8299),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 1,
                            Name = "Máy giặt",
                            ParentCategoryId = 4,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8300)
                        },
                        new
                        {
                            Id = 22,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8333),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8334),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 1,
                            Name = "Máy sấy quần áo",
                            ParentCategoryId = 4,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8335)
                        },
                        new
                        {
                            Id = 23,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8337),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8337),
                            Description = "",
                            IsOnList = true,
                            IsVisible = false,
                            Level = 1,
                            Name = "Phụ kiện máy giặt",
                            ParentCategoryId = 4,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8338)
                        },
                        new
                        {
                            Id = 24,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8344),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8344),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 1,
                            Name = "Máy lạnh",
                            ParentCategoryId = 5,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8345)
                        },
                        new
                        {
                            Id = 25,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8347),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8347),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 1,
                            Name = "Máy nước nóng",
                            ParentCategoryId = 5,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8348)
                        },
                        new
                        {
                            Id = 26,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8350),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8351),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 1,
                            Name = "Máy xay các loại",
                            ParentCategoryId = 6,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8351)
                        },
                        new
                        {
                            Id = 27,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8353),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8354),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 1,
                            Name = "Máy ép trái cây",
                            ParentCategoryId = 6,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8354)
                        },
                        new
                        {
                            Id = 28,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8356),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8357),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 1,
                            Name = "Điện gia dụng",
                            ParentCategoryId = 6,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8357)
                        },
                        new
                        {
                            Id = 29,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8359),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8360),
                            Description = "",
                            IsOnList = true,
                            IsVisible = false,
                            Level = 1,
                            Name = "Nồi",
                            ParentCategoryId = 6,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8360)
                        },
                        new
                        {
                            Id = 30,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8362),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8363),
                            Description = "",
                            IsOnList = true,
                            IsVisible = false,
                            Level = 1,
                            Name = "Bếp",
                            ParentCategoryId = 6,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8363)
                        },
                        new
                        {
                            Id = 31,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8365),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8366),
                            Description = "",
                            IsOnList = true,
                            IsVisible = false,
                            Level = 1,
                            Name = "Lò",
                            ParentCategoryId = 6,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8367)
                        },
                        new
                        {
                            Id = 32,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8368),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8369),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Màn hình cong",
                            ParentCategoryId = 15,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8370)
                        },
                        new
                        {
                            Id = 33,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8372),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8373),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Màn hình phẳng",
                            ParentCategoryId = 15,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8374)
                        },
                        new
                        {
                            Id = 34,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8376),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8376),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Siêu mỏng",
                            ParentCategoryId = 15,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8377)
                        },
                        new
                        {
                            Id = 35,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8378),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8381),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Tivi cao cấp",
                            ParentCategoryId = 15,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8382)
                        },
                        new
                        {
                            Id = 36,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8383),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8384),
                            Description = "",
                            IsOnList = false,
                            IsVisible = true,
                            Level = 2,
                            Name = "Tivi thiết kế đặc biệt",
                            ParentCategoryId = 15,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8384)
                        },
                        new
                        {
                            Id = 37,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8386),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8386),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Loa kéo",
                            ParentCategoryId = 16,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8387)
                        },
                        new
                        {
                            Id = 38,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8388),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8388),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Loa kéo điện",
                            ParentCategoryId = 16,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8389)
                        },
                        new
                        {
                            Id = 39,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8390),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8391),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Loa karaoke xách tay",
                            ParentCategoryId = 16,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8391)
                        },
                        new
                        {
                            Id = 40,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8393),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8394),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Loa bluetooth",
                            ParentCategoryId = 16,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8394)
                        },
                        new
                        {
                            Id = 41,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8396),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8396),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Loa thanh (SoundBar)",
                            ParentCategoryId = 16,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8397)
                        },
                        new
                        {
                            Id = 42,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8399),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8400),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Dàn Karaoke, Amply",
                            ParentCategoryId = 16,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8400)
                        },
                        new
                        {
                            Id = 43,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8402),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8402),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Dàn âm thanh",
                            ParentCategoryId = 16,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8402)
                        },
                        new
                        {
                            Id = 44,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8404),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8404),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Micro",
                            ParentCategoryId = 16,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8405)
                        },
                        new
                        {
                            Id = 45,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8406),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8407),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Loa thùng",
                            ParentCategoryId = 16,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8407)
                        },
                        new
                        {
                            Id = 46,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8408),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8409),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Loa mini",
                            ParentCategoryId = 16,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8409)
                        },
                        new
                        {
                            Id = 47,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8411),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8411),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Loa đồ chơi",
                            ParentCategoryId = 16,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8411)
                        },
                        new
                        {
                            Id = 48,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8413),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8413),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Cáp HDMI",
                            ParentCategoryId = 17,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8414)
                        },
                        new
                        {
                            Id = 49,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8415),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8416),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Khung treo Tivi",
                            ParentCategoryId = 17,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8416)
                        },
                        new
                        {
                            Id = 50,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8418),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8418),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Điều khiển Tivi",
                            ParentCategoryId = 17,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8419)
                        },
                        new
                        {
                            Id = 51,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8420),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8420),
                            Description = "",
                            IsOnList = true,
                            IsVisible = true,
                            Level = 2,
                            Name = "Android TV Box",
                            ParentCategoryId = 17,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8421)
                        },
                        new
                        {
                            Id = 52,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8423),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8424),
                            Description = "",
                            IsOnList = false,
                            IsVisible = true,
                            Level = 2,
                            Name = "Dán màn Tivi",
                            ParentCategoryId = 17,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8424)
                        },
                        new
                        {
                            Id = 53,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8426),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8426),
                            Description = "",
                            IsOnList = false,
                            IsVisible = true,
                            Level = 2,
                            Name = "Sticker Tivi",
                            ParentCategoryId = 17,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8427)
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.CategoryProduct", b =>
                {
                    b.Property<int>("CategoryProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CategoryProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("CategoryProduct", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryProductId = 1,
                            CategoryId = 33,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryProductId = 2,
                            CategoryId = 35,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryProductId = 3,
                            CategoryId = 34,
                            ProductId = 2
                        },
                        new
                        {
                            CategoryProductId = 4,
                            CategoryId = 36,
                            ProductId = 3
                        },
                        new
                        {
                            CategoryProductId = 5,
                            CategoryId = 33,
                            ProductId = 4
                        },
                        new
                        {
                            CategoryProductId = 6,
                            CategoryId = 34,
                            ProductId = 4
                        },
                        new
                        {
                            CategoryProductId = 7,
                            CategoryId = 35,
                            ProductId = 5
                        },
                        new
                        {
                            CategoryProductId = 8,
                            CategoryId = 36,
                            ProductId = 5
                        },
                        new
                        {
                            CategoryProductId = 9,
                            CategoryId = 33,
                            ProductId = 6
                        },
                        new
                        {
                            CategoryProductId = 10,
                            CategoryId = 34,
                            ProductId = 6
                        },
                        new
                        {
                            CategoryProductId = 11,
                            CategoryId = 53,
                            ProductId = 7
                        },
                        new
                        {
                            CategoryProductId = 12,
                            CategoryId = 53,
                            ProductId = 8
                        },
                        new
                        {
                            CategoryProductId = 13,
                            CategoryId = 53,
                            ProductId = 9
                        },
                        new
                        {
                            CategoryProductId = 14,
                            CategoryId = 53,
                            ProductId = 10
                        },
                        new
                        {
                            CategoryProductId = 15,
                            CategoryId = 53,
                            ProductId = 11
                        },
                        new
                        {
                            CategoryProductId = 16,
                            CategoryId = 53,
                            ProductId = 12
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.CategoryTimeRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TimeRangeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TimeRangeId");

                    b.ToTable("CategoryTimeRange");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 15,
                            TimeRangeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 15,
                            TimeRangeId = 2
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 15,
                            TimeRangeId = 4
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 15,
                            TimeRangeId = 5
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 15,
                            TimeRangeId = 6
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 15,
                            TimeRangeId = 7
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 15,
                            TimeRangeId = 8
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 15,
                            TimeRangeId = 9
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 15,
                            TimeRangeId = 11
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.CategoryTranslation", b =>
                {
                    b.Property<int>("CategoryTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryTranslationId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("TranslatedName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("CategoryTranslationId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CategoryTranslation", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryTranslationId = 1,
                            CategoryId = 1,
                            LanguageId = 1,
                            TranslatedName = "Electronics"
                        },
                        new
                        {
                            CategoryTranslationId = 2,
                            CategoryId = 2,
                            LanguageId = 1,
                            TranslatedName = "Mobile Phones"
                        },
                        new
                        {
                            CategoryTranslationId = 3,
                            CategoryId = 3,
                            LanguageId = 1,
                            TranslatedName = "Laptops"
                        },
                        new
                        {
                            CategoryTranslationId = 4,
                            CategoryId = 4,
                            LanguageId = 1,
                            TranslatedName = "Tablets"
                        },
                        new
                        {
                            CategoryTranslationId = 5,
                            CategoryId = 5,
                            LanguageId = 1,
                            TranslatedName = "Cameras"
                        },
                        new
                        {
                            CategoryTranslationId = 6,
                            CategoryId = 6,
                            LanguageId = 1,
                            TranslatedName = "Audio"
                        },
                        new
                        {
                            CategoryTranslationId = 7,
                            CategoryId = 7,
                            LanguageId = 1,
                            TranslatedName = "Home Appliances"
                        },
                        new
                        {
                            CategoryTranslationId = 8,
                            CategoryId = 8,
                            LanguageId = 1,
                            TranslatedName = "Refrigerators"
                        },
                        new
                        {
                            CategoryTranslationId = 9,
                            CategoryId = 9,
                            LanguageId = 1,
                            TranslatedName = "Washing Machines"
                        },
                        new
                        {
                            CategoryTranslationId = 10,
                            CategoryId = 10,
                            LanguageId = 1,
                            TranslatedName = "Water Purifiers"
                        },
                        new
                        {
                            CategoryTranslationId = 11,
                            CategoryId = 11,
                            LanguageId = 1,
                            TranslatedName = "Microwave Ovens"
                        },
                        new
                        {
                            CategoryTranslationId = 12,
                            CategoryId = 12,
                            LanguageId = 1,
                            TranslatedName = "Electric Stoves"
                        },
                        new
                        {
                            CategoryTranslationId = 13,
                            CategoryId = 13,
                            LanguageId = 1,
                            TranslatedName = "Rice Cookers"
                        },
                        new
                        {
                            CategoryTranslationId = 14,
                            CategoryId = 14,
                            LanguageId = 1,
                            TranslatedName = "Air Purifiers"
                        },
                        new
                        {
                            CategoryTranslationId = 15,
                            CategoryId = 15,
                            LanguageId = 1,
                            TranslatedName = "Ovens"
                        },
                        new
                        {
                            CategoryTranslationId = 16,
                            CategoryId = 16,
                            LanguageId = 1,
                            TranslatedName = "Kettles"
                        },
                        new
                        {
                            CategoryTranslationId = 17,
                            CategoryId = 17,
                            LanguageId = 1,
                            TranslatedName = "Vacuum Cleaners"
                        },
                        new
                        {
                            CategoryTranslationId = 18,
                            CategoryId = 18,
                            LanguageId = 1,
                            TranslatedName = "Air Conditioners"
                        },
                        new
                        {
                            CategoryTranslationId = 19,
                            CategoryId = 19,
                            LanguageId = 1,
                            TranslatedName = "Irons"
                        },
                        new
                        {
                            CategoryTranslationId = 20,
                            CategoryId = 20,
                            LanguageId = 1,
                            TranslatedName = "Electric Fans"
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InvoiceDetailId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CommentId");

                    b.HasIndex("InvoiceDetailId")
                        .IsUnique()
                        .HasFilter("[InvoiceDetailId] IS NOT NULL");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            Content = "Chất lượng khá tốt so với giá tiền",
                            Date = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9349),
                            InvoiceDetailId = 1,
                            ProductId = 1,
                            Rating = 4,
                            Type = 0,
                            UserId = new Guid("00bb44d1-f674-49f6-bdae-afb143ab9749")
                        },
                        new
                        {
                            CommentId = 2,
                            Content = "Sản phẩm tạm ổn",
                            Date = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9384),
                            InvoiceDetailId = 2,
                            ProductId = 1,
                            Rating = 3,
                            Type = 2,
                            UserId = new Guid("00bb44d1-f674-49f6-bdae-afb143ab9749")
                        },
                        new
                        {
                            CommentId = 3,
                            Content = "Chất lượng sản phẩm tuyệt vời",
                            Date = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9389),
                            InvoiceDetailId = 3,
                            ProductId = 1,
                            Rating = 5,
                            Type = 1,
                            UserId = new Guid("00bb44d1-f674-49f6-bdae-afb143ab9749")
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts", (string)null);

                    b.HasData(
                        new
                        {
                            ContactId = 1,
                            Address = "123 Main St, City A",
                            Email = "example1@gmail.com",
                            IsRead = false,
                            Phone = "0912345678"
                        },
                        new
                        {
                            ContactId = 2,
                            Address = "456 Oak St, City B",
                            Email = "example2@gmail.com",
                            IsRead = true,
                            Phone = "0912345679"
                        },
                        new
                        {
                            ContactId = 3,
                            Address = "789 Pine St, City C",
                            Email = "example3@gmail.com",
                            IsRead = false,
                            Phone = "0912345680"
                        },
                        new
                        {
                            ContactId = 4,
                            Address = "101 Maple St, City D",
                            Email = "example4@gmail.com",
                            IsRead = true,
                            Phone = "0912345681"
                        },
                        new
                        {
                            ContactId = 5,
                            Address = "202 Birch St, City E",
                            Email = "example5@gmail.com",
                            IsRead = false,
                            Phone = "0912345682"
                        },
                        new
                        {
                            ContactId = 6,
                            Address = "303 Cedar St, City F",
                            Email = "example6@gmail.com",
                            IsRead = true,
                            Phone = "0912345683"
                        },
                        new
                        {
                            ContactId = 7,
                            Address = "404 Elm St, City G",
                            Email = "example7@gmail.com",
                            IsRead = false,
                            Phone = "0912345684"
                        },
                        new
                        {
                            ContactId = 8,
                            Address = "505 Ash St, City H",
                            Email = "example8@gmail.com",
                            IsRead = true,
                            Phone = "0912345685"
                        },
                        new
                        {
                            ContactId = 9,
                            Address = "606 Cherry St, City I",
                            Email = "example9@gmail.com",
                            IsRead = false,
                            Phone = "0912345686"
                        },
                        new
                        {
                            ContactId = 10,
                            Address = "707 Spruce St, City J",
                            Email = "example10@gmail.com",
                            IsRead = true,
                            Phone = "0912345687"
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Image", b =>
                {
                    b.Property<int?>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ImageId"));

                    b.Property<string>("ImagePath")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("ImageId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TypeId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            ImageId = 1,
                            ImagePath = "/Images/Component/ListProduct/product1.webp",
                            IsDefault = true,
                            ProductId = 1,
                            TypeId = 1
                        },
                        new
                        {
                            ImageId = 2,
                            ImagePath = "/Images/Component/ListProduct/product2.webp",
                            IsDefault = true,
                            ProductId = 2,
                            TypeId = 1
                        },
                        new
                        {
                            ImageId = 3,
                            ImagePath = "/Images/Component/ListProduct/product3.webp",
                            IsDefault = true,
                            ProductId = 3,
                            TypeId = 1
                        },
                        new
                        {
                            ImageId = 4,
                            ImagePath = "/Images/Component/ListProduct/product4.webp",
                            IsDefault = true,
                            ProductId = 4,
                            TypeId = 1
                        },
                        new
                        {
                            ImageId = 5,
                            ImagePath = "/Images/Component/ListProduct/product5.webp",
                            IsDefault = true,
                            ProductId = 5,
                            TypeId = 1
                        },
                        new
                        {
                            ImageId = 6,
                            ImagePath = "/Images/Component/ListProduct/product6.webp",
                            IsDefault = true,
                            ProductId = 6,
                            TypeId = 1
                        },
                        new
                        {
                            ImageId = 7,
                            ImagePath = "/Images/Component/ListProduct/product1.webp",
                            IsDefault = true,
                            ProductId = 7,
                            TypeId = 1
                        },
                        new
                        {
                            ImageId = 8,
                            ImagePath = "/Images/Component/ListProduct/product2.webp",
                            IsDefault = true,
                            ProductId = 8,
                            TypeId = 1
                        },
                        new
                        {
                            ImageId = 9,
                            ImagePath = "/Images/Component/ListProduct/product3.webp",
                            IsDefault = true,
                            ProductId = 9,
                            TypeId = 1
                        },
                        new
                        {
                            ImageId = 10,
                            ImagePath = "/Images/Component/ListProduct/product4.webp",
                            IsDefault = true,
                            ProductId = 10,
                            TypeId = 1
                        },
                        new
                        {
                            ImageId = 11,
                            ImagePath = "/Images/Component/ListProduct/product5.webp",
                            IsDefault = true,
                            ProductId = 11,
                            TypeId = 1
                        },
                        new
                        {
                            ImageId = 12,
                            ImagePath = "/Images/Component/ListProduct/product6.webp",
                            IsDefault = true,
                            ProductId = 12,
                            TypeId = 1
                        },
                        new
                        {
                            ImageId = 14,
                            ImagePath = "/Images/Component/ListProduct/product1-1.jpg",
                            IsDefault = false,
                            ProductId = 1,
                            TypeId = 1
                        },
                        new
                        {
                            ImageId = 15,
                            ImagePath = "/Images/Component/ListProduct/product1-2.jpg",
                            IsDefault = false,
                            ProductId = 1,
                            TypeId = 1
                        },
                        new
                        {
                            ImageId = 16,
                            ImagePath = "/Images/Component/ListProduct/product1-3.jpg",
                            IsDefault = false,
                            ProductId = 1,
                            TypeId = 1
                        },
                        new
                        {
                            ImageId = 17,
                            ImagePath = "/Images/Component/ListProduct/product1-4.jpg",
                            IsDefault = false,
                            ProductId = 1,
                            TypeId = 1
                        },
                        new
                        {
                            ImageId = 18,
                            ImagePath = "/Images/Component/ListProduct/product1-5.jpg",
                            IsDefault = false,
                            ProductId = 1,
                            TypeId = 1
                        },
                        new
                        {
                            ImageId = 13,
                            ImagePath = "https://www.dienmayxanh.com/flashsale",
                            IsDefault = false,
                            TypeId = 2
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.ImageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ImageTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Normal"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Banner"
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Interested", b =>
                {
                    b.Property<int>("InterestedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InterestedID"));

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("InterestedID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ProductID");

                    b.ToTable("Interesteds");

                    b.HasData(
                        new
                        {
                            InterestedID = 1,
                            AppUserId = new Guid("00bb44d1-f674-49f6-bdae-afb143ab9749"),
                            ProductID = 1
                        },
                        new
                        {
                            InterestedID = 2,
                            AppUserId = new Guid("00bb44d1-f674-49f6-bdae-afb143ab9749"),
                            ProductID = 2
                        },
                        new
                        {
                            InterestedID = 3,
                            AppUserId = new Guid("00bb44d1-f674-49f6-bdae-afb143ab9749"),
                            ProductID = 3
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("VoucherUserId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherUserId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            InvoiceId = 1,
                            CreateDate = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9438),
                            Status = 0,
                            UserId = new Guid("00bb44d1-f674-49f6-bdae-afb143ab9749"),
                            VoucherUserId = 1
                        },
                        new
                        {
                            InvoiceId = 2,
                            CreateDate = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9441),
                            Status = 0,
                            UserId = new Guid("00bb44d1-f674-49f6-bdae-afb143ab9749")
                        },
                        new
                        {
                            InvoiceId = 3,
                            CreateDate = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9469),
                            Status = 0,
                            UserId = new Guid("00bb44d1-f674-49f6-bdae-afb143ab9749")
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.InvoiceDetail", b =>
                {
                    b.Property<int>("InvoiceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceDetailId"));

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<double>("NewPrice")
                        .HasColumnType("float");

                    b.Property<double>("OldPrice")
                        .HasColumnType("float");

                    b.Property<int>("ProductAttributeId")
                        .HasColumnType("int");

                    b.Property<double>("PuscharPrice")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("InvoiceDetailId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductAttributeId");

                    b.ToTable("InvoiceDetails");

                    b.HasData(
                        new
                        {
                            InvoiceDetailId = 1,
                            InvoiceId = 1,
                            NewPrice = 10000000.0,
                            OldPrice = 10290000.0,
                            ProductAttributeId = 1,
                            PuscharPrice = 9354545.0,
                            Quantity = 2
                        },
                        new
                        {
                            InvoiceDetailId = 2,
                            InvoiceId = 2,
                            NewPrice = 11000000.0,
                            OldPrice = 11990000.0,
                            ProductAttributeId = 2,
                            PuscharPrice = 10809091.0,
                            Quantity = 1
                        },
                        new
                        {
                            InvoiceDetailId = 3,
                            InvoiceId = 3,
                            NewPrice = 11500000.0,
                            OldPrice = 11690000.0,
                            ProductAttributeId = 3,
                            PuscharPrice = 10627273.0,
                            Quantity = 1
                        },
                        new
                        {
                            InvoiceDetailId = 4,
                            InvoiceId = 3,
                            NewPrice = 11000000.0,
                            OldPrice = 11990000.0,
                            ProductAttributeId = 2,
                            PuscharPrice = 10809091.0,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Language", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(2253),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(2254),
                            Description = "",
                            Name = "English",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(2254)
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(2255),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(2256),
                            Description = "",
                            Name = "VietNam",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(2256)
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Magazine", b =>
                {
                    b.Property<int>("MagazineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MagazineId"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("MagazineId");

                    b.ToTable("Magazines");

                    b.HasData(
                        new
                        {
                            MagazineId = 1,
                            Caption = "Danh sách trúng thưởng - Tưng bừng \"Tháng Panasonic\": Cơ hội trúng 102 bộ quà giá trị lên đến 655 triệu đồng",
                            Content = "<h2 style=\"margin-left:0px;\">Cơn sốt game chưa bao giờ hạ nhiệt! Bạn muốn chiến game \"cực phê\" với trải nghiệm đỉnh cao? Chọn ngay <a href=\"https://www.dienmayxanh.com/man-hinh-may-tinh\">màn hình</a> chơi game ROG và nhận quà \"khủng\" - nâng cấp trải nghiệm, chiến thắng mọi thử thách!</h2><p style=\"margin-left:0px;\"><img class=\"image_resized\" style=\"aspect-ratio:845/442;height:auto !important;width:auto;\" src=\"https://cdnv2.tgdd.vn/mwg-static/common/News/1565736/ROG.jpg\" alt=\"Chiến gam hay nhận quà đỉnh\" width=\"845\" height=\"442\"></p><h3 style=\"margin-left:0px;\">1. Thời gian khuyến mãi: Từ 13/08 đến 30/09/2024</h3><h3 style=\"margin-left:0px;\">2. Nội dung chương trình</h3><p style=\"margin-left:0px;\">Trong thời gian khuyến mãi, khi mua mua <a href=\"https://www.dienmayxanh.com/man-hinh-may-tinh/asus-xg27acs-27-inch-2k\">Màn hình Asus Gaming ROG Strix XG27ACS</a> tại Thế giới Di động và Điện máy XANH, bạn sẽ nhận ngay 01 <a href=\"https://rog.asus.com/vn/mice-mouse-pads/mice/ambidextrous/rog-strix-impact-iii-model/\">Chuột ROG STRIX IMPACT III</a>.</p><p style=\"margin-left:0px;\">Áp dụng cho cả mua online và offline.</p><p style=\"margin-left:0px;\">Chương trình có thể kết thúc sớm nếu hết quà.</p><p style=\"margin-left:0px;\">Hạn chót đăng ký nhận quà: 03/10/2024.</p><h3 style=\"margin-left:0px;\">3. Sản phẩm áp dụng</h3><p style=\"margin-left:0px;\"><a href=\"https://www.dienmayxanh.com/man-hinh-may-tinh/asus-xg27acs-27-inch-2k?itm_source=khuyenmai&amp;itm_medium=shortcode&amp;itm_content=325113\"><img class=\"image_resized\" style=\"aspect-ratio:600/600;height:auto !important;width:150px;\" src=\"https://cdn.tgdd.vn/Products/Images/5697/325113/asus-xg27acs-27-inch-2k-thumb-600x600.jpg\" width=\"600\" height=\"600\"></a></p><figure class=\"image image_resized\" style=\"height:auto !important;width:40px !important;\"><a href=\"https://www.dienmayxanh.com/man-hinh-may-tinh/asus-xg27acs-27-inch-2k?itm_source=khuyenmai&amp;itm_medium=shortcode&amp;itm_content=325113\"><img style=\"aspect-ratio:40/40;\" src=\"https://cdn.tgdd.vn/ValueIcons/label-baohanh3nam.png\" width=\"40\" height=\"40\"></a></figure><p style=\"margin-left:0px;\"><a href=\"https://www.dienmayxanh.com/man-hinh-may-tinh/asus-xg27acs-27-inch-2k?itm_source=khuyenmai&amp;itm_medium=shortcode&amp;itm_content=325113\"><span style=\"color:rgb(51,51,51);\"><strong>Asus Gaming 27 inch 2K XG27ACS</strong></span></a></p><p style=\"margin-left:0px;\">Ngừng kinh doanh</p><p style=\"margin-left:0px;\"><a href=\"https://www.dienmayxanh.com/man-hinh-may-tinh/asus-xg27acs-27-inch-2k?itm_source=khuyenmai&amp;itm_medium=shortcode&amp;itm_content=325113\">Xem chi tiết</a></p><h3 style=\"margin-left:0px;\">4. Cách thức nhận quà</h3><p style=\"margin-left:0px;\">Click vào nút \"Đăng ký\" trên website sự kiện <a href=\"https://www.asus.com/vn/events/infoM/activity_ROGLCD\">https://www.asus.com/vn/events/infoM/activity_ROGLCD</a>.</p><p style=\"margin-left:0px;\">- Đính kèm hình ảnh hóa đơn mua hàng, phiếu thu, phiếu xuất kho có dấu xác nhận của cửa hàng, thể hiện rõ tên sản phẩm và ngày mua hàng trong thời gian chương trình diễn ra.</p><p style=\"margin-left:0px;\">- Đính kèm ảnh chụp số S/N của sản phẩm.</p><p style=\"margin-left:0px;\">- Điền serial của sản phẩm.</p><p style=\"margin-left:0px;\">- Điền Họ và tên người nhận quà.</p><p style=\"margin-left:0px;\">- Điền Địa chỉ nhận quà.</p><p style=\"margin-left:0px;\">- Điền Số điện thoại liên hệ.</p><p style=\"margin-left:0px;\">Hình chụp số S/N trên sản phẩm phải chụp kèm với hoá đơn, chỉ chấp nhận hình chụp số S/N trên sản phẩm, số S/N trên hộp không có hiệu lực.</p><p style=\"margin-left:0px;\"><img class=\"image_resized\" style=\"aspect-ratio:732/786;height:auto !important;width:auto;\" src=\"https://cdnv2.tgdd.vn/mwg-static/common/News/1565736/image1%20%283%29.jpg\" alt=\"Bước 1\" width=\"732\" height=\"786\"></p><p style=\"margin-left:0px;\"><img class=\"image_resized\" style=\"aspect-ratio:732/753;height:auto !important;width:100%;\" src=\"https://cdnv2.tgdd.vn/mwg-static/common/News/1565736/image2%20%283%29.jpg\" alt=\"Bước 2\" width=\"732\" height=\"753\"></p><h3 style=\"margin-left:0px;\">4. Thông tin lưu ý</h3><p style=\"margin-left:0px;\">- Trong trường hợp không thể đăng ký trên hệ thống, quý khách hàng vui lòng gửi thông tin nhận quà như bên dưới về địa chỉ Email: dangkyasus@gmail.com với tiêu đề: \"[Khuyen mai] LCD GAMING\".</p><p style=\"margin-left:0px;\">- ASUS sẽ kiểm tra và liên hệ gửi quà tới bạn trong 20 ngày làm việc (trừ thứ 7 &amp; Chủ nhật).</p><p style=\"margin-left:0px;\">- Chương trình không áp dụng đồng thời với các chương trình khuyến mãi khác.</p><p style=\"margin-left:0px;\">- Quà tặng không có giá trị quy đổi thành tiền mặt hoặc các giá trị khác tương đương.</p><p style=\"margin-left:0px;\">- Hóa đơn/ phiếu thu/ phiếu xuất kho phải có con dấu của cửa hàng bán lẻ.</p><p style=\"margin-left:0px;\">- Chương trình chỉ dành cho khách hàng mua lẻ từ cửa hàng, tất cả hóa đơn từ nhà phân phối đều không được tham gia chương trình khuyến mãi này.</p><p style=\"margin-left:0px;\">- Dung lượng hình ảnh hóa đơn tải lên hệ thống &lt;1Mb.</p><p style=\"margin-left:0px;\">- Trong trường hợp cần thiết nhằm bảo đảm quyền lợi khách hàng, phía ASUS sẽ cần thêm những thông tin khác để xác định khách mua hàng là chính xác như: hóa đơn đỏ, giấy tờ tùy thân có ảnh đại diện,...</p><p style=\"margin-left:0px;\">Đây là chương trình của ASUS không phải của dienmayxanh.com và thegioididong.com, mọi góp ý hay thắc mắc khác về chương trình, xin vui lòng post tại <a href=\"https://www.facebook.com/share/g/NB6YhgtTY4wDwQ47/?mibextid=K35XfP\">Hội linh kiện PC ASUS ROG Việt Nam</a>.</p>",
                            CreateAt = new DateTime(2024, 8, 28, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(2217),
                            Image = "/Images/Magazine/Picture1.jpg",
                            Status = 1
                        },
                        new
                        {
                            MagazineId = 2,
                            Caption = "Mua ngay máy lạnh Daikin: Thêm năm bảo hành, an tâm chất \"Nhật\"",
                            Content = "Content 2",
                            CreateAt = new DateTime(2024, 8, 29, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(2225),
                            Image = "/Images/Magazine/Picture2.jpg",
                            Status = 1
                        },
                        new
                        {
                            MagazineId = 3,
                            Caption = "Mua sớm máy lạnh - Tặng 2 lần vệ sinh chỉ có tại Điện máy XANH | Mới 2024",
                            Content = "Content 3",
                            CreateAt = new DateTime(2024, 8, 30, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(2232),
                            Image = "/Images/Magazine/Picture3.jpg",
                            Status = 1
                        },
                        new
                        {
                            MagazineId = 4,
                            Caption = "Khai lộc thăng hạng, vượt đỉnh thăng hoa: Mua Tivi LG nhận ưu đãi đến 51.000.000đ cùng gói ứng dụng giải trí hấp dẫn",
                            Content = "Content 4",
                            CreateAt = new DateTime(2024, 8, 31, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(2234),
                            Image = "/Images/Magazine/Picture4.jpg",
                            Status = 1
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.NewFeed", b =>
                {
                    b.Property<int>("NewFeedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewFeedId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("NewFeedId");

                    b.ToTable("NewFeeds");

                    b.HasData(
                        new
                        {
                            NewFeedId = 1,
                            Content = "We are excited to announce the release of our new product.",
                            ProductId = 101,
                            Subject = "New Product Release"
                        },
                        new
                        {
                            NewFeedId = 2,
                            Content = "Our product has been updated with new features.",
                            ProductId = 102,
                            Subject = "Product Update"
                        },
                        new
                        {
                            NewFeedId = 3,
                            Content = "Enjoy a special offer on our latest product.",
                            ProductId = 103,
                            Subject = "Special Offer"
                        },
                        new
                        {
                            NewFeedId = 4,
                            Content = "Check out our new limited edition product.",
                            ProductId = 104,
                            Subject = "Limited Edition"
                        },
                        new
                        {
                            NewFeedId = 5,
                            Content = "Read the latest review on our product.",
                            ProductId = 105,
                            Subject = "Product Review"
                        },
                        new
                        {
                            NewFeedId = 6,
                            Content = "We value your feedback on our product.",
                            ProductId = 106,
                            Subject = "Customer Feedback"
                        },
                        new
                        {
                            NewFeedId = 7,
                            Content = "Important notice about a product recall.",
                            ProductId = 107,
                            Subject = "Product Recall"
                        },
                        new
                        {
                            NewFeedId = 8,
                            Content = "Don't miss out on our holiday sale.",
                            ProductId = 108,
                            Subject = "Holiday Sale"
                        },
                        new
                        {
                            NewFeedId = 9,
                            Content = "Join us for the launch event of our new product.",
                            ProductId = 109,
                            Subject = "Product Launch Event"
                        },
                        new
                        {
                            NewFeedId = 10,
                            Content = "Participate in our product survey and win prizes.",
                            ProductId = 110,
                            Subject = "Product Survey"
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            NotificationId = 1,
                            Content = "Welcome to our service!",
                            Subject = "Welcome"
                        },
                        new
                        {
                            NotificationId = 2,
                            Content = "Your order has been shipped.",
                            Subject = "Order Shipped"
                        },
                        new
                        {
                            NotificationId = 3,
                            Content = "Your order has been delivered.",
                            Subject = "Order Delivered"
                        },
                        new
                        {
                            NotificationId = 4,
                            Content = "New promotions available!",
                            Subject = "Promotions"
                        },
                        new
                        {
                            NotificationId = 5,
                            Content = "Your subscription is about to expire.",
                            Subject = "Subscription Expiry"
                        },
                        new
                        {
                            NotificationId = 6,
                            Content = "We have updated our terms of service.",
                            Subject = "Terms of Service Update"
                        },
                        new
                        {
                            NotificationId = 7,
                            Content = "Password reset request.",
                            Subject = "Password Reset"
                        },
                        new
                        {
                            NotificationId = 8,
                            Content = "Your account has been activated.",
                            Subject = "Account Activation"
                        },
                        new
                        {
                            NotificationId = 9,
                            Content = "Monthly newsletter available.",
                            Subject = "Newsletter"
                        },
                        new
                        {
                            NotificationId = 10,
                            Content = "Your feedback is important to us.",
                            Subject = "Feedback Request"
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Origin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Origins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8500),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8498),
                            Description = "Xuất xứ: Trung Quốc",
                            Name = "Trung Quốc",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8498)
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8503),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8502),
                            Description = "Xuất xứ: Hàn Quốc",
                            Name = "Hàn Quốc",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8502)
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8506),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8505),
                            Description = "Xuất xứ: Mỹ",
                            Name = "Mỹ",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8505)
                        },
                        new
                        {
                            Id = 4,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8509),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8507),
                            Description = "Xuất xứ: Nhật Bản",
                            Name = "Nhật Bản",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8508)
                        },
                        new
                        {
                            Id = 5,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8511),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8510),
                            Description = "Xuất xứ: Đức",
                            Name = "Đức",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8510)
                        },
                        new
                        {
                            Id = 6,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8514),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8512),
                            Description = "Xuất xứ: Anh",
                            Name = "Anh",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8513)
                        },
                        new
                        {
                            Id = 7,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8516),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8515),
                            Description = "Xuất xứ: Pháp",
                            Name = "Pháp",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8515)
                        },
                        new
                        {
                            Id = 8,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8519),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8517),
                            Description = "Xuất xứ: Việt Nam",
                            Name = "Việt Nam",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8518)
                        },
                        new
                        {
                            Id = 9,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8521),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8520),
                            Description = "Xuất xứ: Úc",
                            Name = "Úc",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8520)
                        },
                        new
                        {
                            Id = 10,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8524),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8522),
                            Description = "Xuất xứ: Canada",
                            Name = "Canada",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8523)
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.PaymentInfo", b =>
                {
                    b.Property<int>("PaymentInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentInfoId"));

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentStatus")
                        .HasColumnType("int");

                    b.HasKey("PaymentInfoId");

                    b.HasIndex("InvoiceId")
                        .IsUnique()
                        .HasFilter("[InvoiceId] IS NOT NULL");

                    b.ToTable("PaymentInfos");

                    b.HasData(
                        new
                        {
                            PaymentInfoId = 1,
                            InvoiceId = 1,
                            PaymentMethod = 2,
                            PaymentStatus = 0
                        },
                        new
                        {
                            PaymentInfoId = 2,
                            InvoiceId = 2,
                            PaymentMethod = 1,
                            PaymentStatus = 0
                        },
                        new
                        {
                            PaymentInfoId = 3,
                            InvoiceId = 3,
                            PaymentMethod = 0,
                            PaymentStatus = 0
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Product.AttributeValue", b =>
                {
                    b.Property<int>("AtributeValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AtributeValueId"));

                    b.Property<int?>("AttributeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShow")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AtributeValueId");

                    b.HasIndex("AttributeId");

                    b.ToTable("AttributeValues", (string)null);

                    b.HasData(
                        new
                        {
                            AtributeValueId = 1,
                            AttributeId = 1,
                            IsActive = true,
                            IsShow = true,
                            Type = 1,
                            Value = "Red"
                        },
                        new
                        {
                            AtributeValueId = 2,
                            AttributeId = 1,
                            IsActive = true,
                            IsShow = true,
                            Type = 1,
                            Value = "Blue"
                        },
                        new
                        {
                            AtributeValueId = 3,
                            AttributeId = 2,
                            IsActive = true,
                            IsShow = true,
                            Type = 1,
                            Value = "Small"
                        },
                        new
                        {
                            AtributeValueId = 4,
                            AttributeId = 2,
                            IsActive = true,
                            IsShow = true,
                            Type = 1,
                            Value = "Medium"
                        },
                        new
                        {
                            AtributeValueId = 5,
                            AttributeId = 2,
                            IsActive = true,
                            IsShow = true,
                            Type = 1,
                            Value = "Large"
                        },
                        new
                        {
                            AtributeValueId = 6,
                            AttributeId = 3,
                            IsActive = true,
                            IsShow = true,
                            Type = 1,
                            Value = "1 HP"
                        },
                        new
                        {
                            AtributeValueId = 7,
                            AttributeId = 3,
                            IsActive = true,
                            IsShow = true,
                            Type = 1,
                            Value = "1.5 HP"
                        },
                        new
                        {
                            AtributeValueId = 8,
                            AttributeId = 3,
                            IsActive = true,
                            IsShow = true,
                            Type = 1,
                            Value = "2 HP"
                        },
                        new
                        {
                            AtributeValueId = 9,
                            AttributeId = 3,
                            IsActive = true,
                            IsShow = true,
                            Type = 1,
                            Value = "2.5 HP"
                        },
                        new
                        {
                            AtributeValueId = 10,
                            AttributeId = 4,
                            IsActive = true,
                            IsShow = true,
                            Type = 1,
                            Value = "1 chiều"
                        },
                        new
                        {
                            AtributeValueId = 11,
                            AttributeId = 4,
                            IsActive = true,
                            IsShow = true,
                            Type = 1,
                            Value = "2 chiều"
                        },
                        new
                        {
                            AtributeValueId = 12,
                            AttributeId = 5,
                            IsActive = true,
                            IsShow = true,
                            Type = 1,
                            Value = "43 inch"
                        },
                        new
                        {
                            AtributeValueId = 13,
                            AttributeId = 5,
                            IsActive = true,
                            IsShow = true,
                            Type = 1,
                            Value = "50 inch"
                        },
                        new
                        {
                            AtributeValueId = 14,
                            AttributeId = 5,
                            IsActive = true,
                            IsShow = true,
                            Type = 1,
                            Value = "55 inch"
                        },
                        new
                        {
                            AtributeValueId = 15,
                            AttributeId = 5,
                            IsActive = true,
                            IsShow = true,
                            Type = 1,
                            Value = "65 inch"
                        },
                        new
                        {
                            AtributeValueId = 16,
                            AttributeId = 5,
                            IsActive = true,
                            IsShow = true,
                            Type = 1,
                            Value = "75 inch"
                        },
                        new
                        {
                            AtributeValueId = 17,
                            AttributeId = 6,
                            IsActive = true,
                            IsShow = true,
                            Type = 0,
                            Value = "Smart TV NanoCell"
                        },
                        new
                        {
                            AtributeValueId = 18,
                            AttributeId = 7,
                            IsActive = true,
                            IsShow = true,
                            Type = 0,
                            Value = "WebOS 22"
                        },
                        new
                        {
                            AtributeValueId = 19,
                            AttributeId = 8,
                            IsActive = true,
                            IsShow = true,
                            Type = 0,
                            Value = "YouTube KidsYouTubeVTVcab ONVieONTV 360Trình duyệt webSpotifyPOPS KidsNhaccuatuiNetflixMyTVGalaxy Play (Fim+)FPT PlayClip TV"
                        },
                        new
                        {
                            AtributeValueId = 20,
                            AttributeId = 9,
                            IsActive = true,
                            IsShow = true,
                            Type = 0,
                            Value = "Tương thích HEVCTương thích bộ mã hóa Video decoder (VP9, AV1) Nâng cấp độ phân giải 4K AI UpscalingNâng cấp hình ảnh AI Picture Pro 4KHLGHDR10 ProHDR Dynamic Tone MappingGiảm độ trễ chơi game Auto Low Latency Mode (ALLM)Dải màu rộng Nano ColorChế độ hình ảnh phù hợp nội dungChế độ game HGiGActive HDR"
                        },
                        new
                        {
                            AtributeValueId = 21,
                            AttributeId = 10,
                            IsActive = true,
                            IsShow = true,
                            Type = 0,
                            Value = "Tìm kiếm giọng nói trên YouTube bằng tiếng ViệtNhận diện giọng nói LG Voice RecognitionLG Voice Search - tìm kiếm bằng giọng nói tiếng ViệtGoogle Assistant (Chưa có tiếng Việt)Alexa (Chưa có tiếng Việt)"
                        },
                        new
                        {
                            AtributeValueId = 22,
                            AttributeId = 11,
                            IsActive = true,
                            IsShow = true,
                            Type = 0,
                            Value = "Magic Remote"
                        },
                        new
                        {
                            AtributeValueId = 23,
                            AttributeId = 12,
                            IsActive = true,
                            IsShow = true,
                            Type = 0,
                            Value = "Screen ShareAirPlay 2"
                        },
                        new
                        {
                            AtributeValueId = 24,
                            AttributeId = 13,
                            IsActive = true,
                            IsShow = true,
                            Type = 0,
                            Value = "Ngang 96.7 cm - Cao 62.9 cm - Dày 24.9 cm"
                        },
                        new
                        {
                            AtributeValueId = 25,
                            AttributeId = 14,
                            IsActive = true,
                            IsShow = true,
                            Type = 0,
                            Value = "4K (Ultra HD)"
                        },
                        new
                        {
                            AtributeValueId = 26,
                            AttributeId = 15,
                            IsActive = true,
                            IsShow = true,
                            Type = 0,
                            Value = "Nhựa"
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Product.Attributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShow")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Attributes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            IsShow = true,
                            Name = "Color",
                            ProductId = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            IsShow = true,
                            Name = "Size",
                            ProductId = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            IsShow = true,
                            Name = "Công xuất",
                            ProductId = 1,
                            Type = 2
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            IsShow = true,
                            Name = "Loại máy",
                            ProductId = 1,
                            Type = 2
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            IsShow = true,
                            Name = "Kích cỡ màn hình",
                            ProductId = 1,
                            Type = 2
                        },
                        new
                        {
                            Id = 6,
                            IsActive = true,
                            IsShow = true,
                            Name = "Loại tivi",
                            ProductId = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 7,
                            IsActive = true,
                            IsShow = true,
                            Name = "Hệ điều hành",
                            ProductId = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 8,
                            IsActive = true,
                            IsShow = true,
                            Name = "Ứng dụng phổ biến",
                            ProductId = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 9,
                            IsActive = true,
                            IsShow = true,
                            Name = "Công nghệ hình ảnh",
                            ProductId = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 10,
                            IsActive = true,
                            IsShow = true,
                            Name = "Điều khiển bằng giọng nói",
                            ProductId = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 11,
                            IsActive = true,
                            IsShow = true,
                            Name = "Remote thông minh",
                            ProductId = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 12,
                            IsActive = true,
                            IsShow = true,
                            Name = "Chiếu hình từ điện thoại lên TV",
                            ProductId = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 13,
                            IsActive = true,
                            IsShow = true,
                            Name = "Kích thước",
                            ProductId = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 14,
                            IsActive = true,
                            IsShow = true,
                            Name = "Độ phân giải",
                            ProductId = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 15,
                            IsActive = true,
                            IsShow = true,
                            Name = "Chất liệu viền tivi",
                            ProductId = 1,
                            Type = 0
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Product.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OriginId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OriginId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 2,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8594),
                            CreateBy = new Guid("d7d5c778-2d8a-4a2b-ab12-285f1cb4b08f"),
                            Description = "<h3 style=\"margin-left:0px;\">Tổng quan thiết kế&nbsp;</h3><p style=\"margin-left:0px;\">- <a href=\"https://www.dienmayxanh.com/tivi/smart-khung-tranh-the-frame-qled-samsung-4k-50-inch-qa50ls03b\">Smart Tivi Khung Tranh The Frame QLED Samsung 4K 50 inch QA50LS03B</a>&nbsp;với thiết kế đơn giản nhưng tinh tế, hòa mình một cách hoàn hảo vào bất kỳ không gian nội thất nào. Viền tivi siêu mỏng, chắc chắn hơn và mặt sau được hoàn thiện tỉ mỉ với màu sắc đơn sắc ấn tượng, The Frame làm nổi bật vẻ đẹp tinh tế của TV từ mọi góc nhìn\r\n\r\n\r\n<i>*Hình ảnh chỉ mang tính chất minh họa</i>\r\n</p><p style=\"margin-left:0px;\">Khung viền linh hoạt giúp The Frame hòa mình vào mọi không gian. Với sự đa dạng trong lựa chọn khung viền, bạn có thể thỏa sức ngắm nhìn tuyệt tác khung tranh của mình. Các khớp nối nam châm linh hoạt cho phép bạn dễ dàng chuyển đổi màu sắc và phong cách khung viền.\r\n\r\n\r\n<i>*Hình ảnh chỉ mang tính chất minh họa</i>\r\n</p><p style=\"margin-left:0px;\">- Bên cạnh giải pháp treo tường, The Frame còn có chân đế bằng nhựa chắc chắn và có thể điều chỉnh độ cao cho phép bạn nâng lên cao và hạ xuống dễ dàng.</p><p style=\"margin-left:0px;\">- Màn hình&nbsp;<a href=\"https://www.dienmayxanh.com/tivi?g=50-inch\">50 inch</a>&nbsp;phù hợp cho những không gian có diện tích vừa.</p><p style=\"margin-left:0px;\">- <strong>Bật lên là </strong><a href=\"https://www.dienmayxanh.com/tivi\"><strong>tivi</strong></a><strong>, tắt đi là khung tranh </strong>mang dáng vóc của một tác phẩm nghệ thuật,&nbsp;thích hợp&nbsp;với không gian phòng khách, phòng ngủ, phòng trưng bày,... đặc biệt phù hợp với những người yêu hội họa, yêu cái đẹp\r\n\r\n<i>*Hình ảnh chỉ mang tính chất minh họa</i>\r\n</p><h3 style=\"margin-left:0px;\">Công nghệ hình ảnh</h3><p style=\"margin-left:0px;\">-&nbsp;Độ phân giải<strong>&nbsp;</strong><a href=\"https://www.dienmayxanh.com/kinh-nghiem-hay/tivi-uhd-tivi-4k-la-gi-co-khac-gi-so-voi-tivi-full-578555\"><strong>4K</strong></a>&nbsp;cho hình ảnh sắc nét đến từng chi tiết.</p><p style=\"margin-left:0px;\">-&nbsp;<a href=\"https://www.dienmayxanh.com/kinh-nghiem-hay/quantum-4k-bo-vi-xu-ly-manh-me-cua-samsung-1175879\"><strong>Bộ xử lý Quantum 4K</strong></a><strong>&nbsp;</strong>sẽ<strong>&nbsp;</strong>tự động nâng cấp chất lượng hình ảnh lên gần chuẩn 4K khi chất lượng nguồn vào chưa đạt chuẩn nhờ công nghệ trí thông minh nhân tạo AI.</p><p style=\"margin-left:0px;\">-&nbsp;<a href=\"https://www.dienmayxanh.com/kinh-nghiem-hay/cong-nghe-hinh-anh-tren-tivi-samsung-838738#quantum-hdr\"><strong>Quantum HDR</strong></a><strong>&nbsp;</strong>điều chỉnh độ sáng theo từng khung hình hiển thị giúp mọi chi tiết hình ảnh đều trở nên rõ ràng, bắt mắt.</p><p style=\"margin-left:0px;\">-<a href=\"https://www.dienmayxanh.com/kinh-nghiem-hay/cac-cong-nghe-noi-bat-cua-tivi-samsung-20-1339340#motion-xcelerator-turbo+\">&nbsp;<strong>Motion Xcelerator Turbo+</strong></a>&nbsp;thêm khung hình vào nội dung gốc,&nbsp;độ rõ nét của chuyển động được nâng cao, cho hình ảnh mượt mà, trải nghiệm chơi game đỉnh cao.</p><p style=\"margin-left:0px;\">-&nbsp;<a href=\"https://www.dienmayxanh.com/kinh-nghiem-hay/tivi-samsung-2020-co-gi-moi-1240803#adaptive-picture\"><strong>Adaptive Picture</strong></a>&nbsp;tối ưu độ sáng hình ảnh theo điều kiện môi trường xung quanh, đem lại&nbsp;chất lượng hình ảnh tuyệt hảo, đồng nhất mọi nội dung dù xem ở bất kỳ thời điểm nào trong ngày.</p><p style=\"margin-left:0px;\">- Đặc biệt, chiếc tivi Lifestyle được trang bị kho tranh với hơn 1600 tác phẩm (sử dụng miễn phí trong 3 tháng đầu), tải miễn phí 25 tác phẩm trong thời gian trên.</p><p style=\"margin-left:0px;\">Mời bạn xem thêm:<a href=\"https://www.dienmayxanh.com/kinh-nghiem-hay/diem-mat-nhung-do-phan-giai-pho-bien-hien-nay-tren-577178\">&nbsp;Những độ phân giải màn hình phổ biến hiện nay trên tivi</a>\r\n\r\n <i>*Hình ảnh chỉ mang tính chất minh họa</i>\r\n</p><h3 style=\"margin-left:0px;\">Công nghệ âm thanh</h3><p style=\"margin-left:0px;\">- Hệ thống loa <strong>20 W</strong> sống động.</p><p style=\"margin-left:0px;\">- Công nghệ <a href=\"https://www.dienmayxanh.com/kinh-nghiem-hay/cong-nghe-am-thanh-object-tracking-sound-1344551#object-tracking-sound-lite\"><strong>Object Tracking Sound Lite (OTS Lite)</strong></a><strong>&nbsp;</strong>làm cho âm thanh phù hợp với hình ảnh chuyển động trên khung hình, mang đến những làn âm thanh lan tỏa rộng khắp không gian.</p><p style=\"margin-left:0px;\">- <a href=\"https://www.dienmayxanh.com/kinh-nghiem-hay/tivi-samsung-2020-co-gi-moi-1240803#cong-nghe-am-thanh-ava\"><strong>Active Voice Amplifier (AVA)</strong></a> có thể điều chỉnh âm lượng hội thoại theo điều kiện môi trường bên ngoài, giúp bạn có thể vừa làm việc nhà vừa thưởng thức những bộ phim hấp dẫn.</p><p style=\"margin-left:0px;\">- <a href=\"https://www.dienmayxanh.com/kinh-nghiem-hay/cac-cong-nghe-noi-bat-cua-tivi-samsung-20-1339340#q-symphony\"><strong>Q-Symphony</strong></a> cầu nối giữa loa tivi và loa thanh giúp tối ưu công suất loa,&nbsp;tạo ra không gian giải trí đỉnh cao.</p><p style=\"margin-left:0px;\">- <strong>Adaptive Sound</strong> âm thanh được tinh chỉnh phù hợp với nội dung giải trí, đem đến cho người dùng trải nghiệm âm thanh hoành tráng, mạnh mẽ.\r\n\r\n<i>*Hình ảnh chỉ mang tính chất minh họa</i>\r\n</p><h3 style=\"margin-left:0px;\">Hệ điều hành</h3><p style=\"margin-left:0px;\">- <strong>Hệ điều hành Tizen</strong>&nbsp;trực quan, thân thiện với người dùng.</p><p style=\"margin-left:0px;\">- Hệ điều hành <a href=\"https://www.dienmayxanh.com/tivi-samsung\">tivi Samsung</a> sở hữu kho ứng dụng phong phú như: Clip TV, FPT Play, Galaxy Play (Fim+), MP3 Zing, MyTV, Netflix,&nbsp;<a href=\"https://www.thegioididong.com/game-app/pops-kids-phim-nhac-tv-show-220604\">POPS Kids</a>, Spotify, Trình duyệt web, VieON, YouTube,... đáp ứng cơ bản nhu cầu giải trí cho người dùng.</p><p style=\"margin-left:0px;\">Xem thêm:&nbsp;<a href=\"https://www.dienmayxanh.com/kinh-nghiem-hay/cach-xem-phim-online-tren-tivi-887946#xem-phim-tren-trinh-duyet-web\">Cách xem phim bằng trình duyệt web trên tivi</a>\r\n\r\n <i>*Hình ảnh chỉ mang tính chất minh họa</i>\r\n</p><h3 style=\"margin-left:0px;\">Tiện ích</h3><p style=\"margin-left:0px;\">- Công nghệ&nbsp;<a href=\"https://www.dienmayxanh.com/kinh-nghiem-hay/cac-cong-nghe-noi-bat-cua-tivi-samsung-20-1339340#multi-view\"><strong>Multi View</strong></a>&nbsp;giúp xem cùng lúc nhiều nội dung nhờ khả năng chia hai màn hình tivi.</p><p style=\"margin-left:0px;\">- Ứng dụng&nbsp;<a href=\"https://www.dienmayxanh.com/kinh-nghiem-hay/huong-dan-su-dung-ung-dung-smartthings-dieu-khien-1126015\"><strong>SmartThings</strong></a>&nbsp;hỗ trợ kết nối và sử dụng tivi cũng như các thiết bị trong nhà dễ dàng và nhanh chóng.</p><p style=\"margin-left:0px;\">-&nbsp;<a href=\"https://xn--xem%20thm%20v%20one%20remote-csc9820u/\"><strong>One Remote</strong></a>&nbsp;có thể sạc bằng năng lượng mặt trời tiện lợi, bảo vệ môi trường.</p><p style=\"margin-left:0px;\">- Chiếu màn hình từ điện thoại nhanh chóng nhờ&nbsp;<a href=\"https://www.dienmayxanh.com/kinh-nghiem-hay/air-play-2-tren-tivi-la-gi-nhung-tivi-nao-ho-tro-a-1172156\">AirPlay 2</a>, <a href=\"https://www.dienmayxanh.com/kinh-nghiem-hay/huong-dan-ghep-noi-screen-mirroring-giua-dien-thoa-571562\">Screen Mirroring</a>,&nbsp;<a href=\"https://www.dienmayxanh.com/kinh-nghiem-hay/cac-cong-nghe-noi-bat-cua-tivi-samsung-20-1339340#tap-view\">Tap View.</a></p><p style=\"margin-left:0px;\">Xem thêm:&nbsp;<a href=\"https://www.dienmayxanh.com/kinh-nghiem-hay/cach-su-dung-tinh-nang-chia-doi-man-hinh-tivi-mult-1257139\">Cách sử dụng tính năng Multi View trên tivi Samsung</a>\r\n\r\n <i>Nhìn chung, với thiết kế khung tranh đặc biệt, mỏng, nhẹ, chắc chắn,&nbsp;bộ xử lý Quantum 4K, công nghệ OTS Lite âm thanh chuyển động theo hình ảnh, hệ điều hành Tizen OS 6.0 đa nhiệm, tiện ích phong phú sẽ là lựa chọn không thể tuyệt vời hơn dành cho các tín đồ nghệ thuật và yêu cái đẹp.</i></p>",
                            Name = "Samsung Smart TV QLED QA55Q70C",
                            OriginId = 1,
                            Status = 1,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8594)
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8614),
                            CreateBy = new Guid("be67907c-0ec8-46d5-996d-d175b68b6df3"),
                            Description = "Description of Product 2",
                            Name = "LG Smart TV NanoCell 55NANO76SQA",
                            OriginId = 4,
                            Status = 1,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8615)
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 1,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8619),
                            CreateBy = new Guid("fcc58311-d8f5-46cb-9996-0ea853751fb1"),
                            Description = "Description of Product 2",
                            Name = "LG Smart TV 65UQ8000PSC",
                            OriginId = 7,
                            Status = 1,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8620)
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 2,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8625),
                            CreateBy = new Guid("d5e1f711-fb00-430b-9b73-9e8d553c144c"),
                            Description = "Description of Product 2",
                            Name = "Samsung Smart TV QLED Khung tranh QA50LS03B",
                            OriginId = 8,
                            Status = 1,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8626)
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 1,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8630),
                            CreateBy = new Guid("e3f05096-733c-4020-a8dc-b0dcb95ad934"),
                            Description = "Description of Product 2",
                            Name = "AQUA Android TV AQT55D67UG",
                            OriginId = 10,
                            Status = 1,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8630)
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 6,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8634),
                            CreateBy = new Guid("fe81a7c0-8c11-412f-9257-4109602fa5b7"),
                            Description = "Description of Product 2",
                            Name = "LG Smart TV 50UQ7550PSF",
                            OriginId = 7,
                            Status = 1,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8672)
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 1,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8676),
                            CreateBy = new Guid("2bccda2f-32c1-42b5-ba57-b85eb0482d4b"),
                            Description = "Description of Product 2",
                            Name = "Bình đun siêu tốc Delites 1.8 lít ST18S05",
                            OriginId = 7,
                            Status = 1,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8676)
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 1,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8680),
                            CreateBy = new Guid("a124518b-3c01-4fb5-9da3-2b35ba5161b4"),
                            Description = "Description of Product 2",
                            Name = "Bình đun siêu tốc Delites 1.8 lít ST18S05",
                            OriginId = 7,
                            Status = 1,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8681)
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 1,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8684),
                            CreateBy = new Guid("348a4f29-c708-4b7f-a055-b93d9db50fd3"),
                            Description = "Description of Product 2",
                            Name = "Bình đun siêu tốc Delites 1.8 lít ST18S05",
                            OriginId = 7,
                            Status = 1,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8685)
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 1,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8691),
                            CreateBy = new Guid("c5c13496-61c5-463e-87bf-814c2e28fc57"),
                            Description = "Description of Product 2",
                            Name = "Bình đun siêu tốc Delites 1.8 lít ST18S05",
                            OriginId = 7,
                            Status = 1,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8691)
                        },
                        new
                        {
                            Id = 11,
                            BrandId = 1,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8695),
                            CreateBy = new Guid("33863c0c-d33a-4ef1-96de-5123d707f9c6"),
                            Description = "Description of Product 2",
                            Name = "Bình đun siêu tốc Delites 1.8 lít ST18S05",
                            OriginId = 7,
                            Status = 1,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8696)
                        },
                        new
                        {
                            Id = 12,
                            BrandId = 1,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8699),
                            CreateBy = new Guid("f3f36d4b-8330-4d08-b457-4c2dda50aa11"),
                            Description = "Description of Product 2",
                            Name = "Bình đun siêu tốc Delites 1.8 lít ST18S05",
                            OriginId = 7,
                            Status = 1,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(8700)
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Product.ProductAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AfterDiscountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AttributeValueId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("PuscharPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Tax")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttributeValueId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AfterDiscountPrice = 10000000m,
                            AttributeValueId = 12,
                            IsDefault = true,
                            ProductId = 1,
                            PuscharPrice = 9354545m,
                            Quantity = 100,
                            ReleaseYear = 2022,
                            SalePrice = 10290000m,
                            Tax = 10
                        },
                        new
                        {
                            Id = 2,
                            AfterDiscountPrice = 11000000m,
                            AttributeValueId = 13,
                            IsDefault = false,
                            ProductId = 1,
                            PuscharPrice = 10809091m,
                            Quantity = 100,
                            ReleaseYear = 2022,
                            SalePrice = 11990000m,
                            Tax = 10
                        },
                        new
                        {
                            Id = 3,
                            AfterDiscountPrice = 11500000m,
                            AttributeValueId = 14,
                            IsDefault = false,
                            ProductId = 1,
                            PuscharPrice = 10627273m,
                            Quantity = 100,
                            ReleaseYear = 2022,
                            SalePrice = 11690000m,
                            Tax = 10
                        },
                        new
                        {
                            Id = 4,
                            AfterDiscountPrice = 13000000m,
                            AttributeValueId = 15,
                            IsDefault = false,
                            ProductId = 1,
                            PuscharPrice = 12263636m,
                            Quantity = 100,
                            ReleaseYear = 2023,
                            SalePrice = 13490000m,
                            Tax = 10
                        },
                        new
                        {
                            Id = 5,
                            AfterDiscountPrice = 19990000m,
                            AttributeValueId = 16,
                            IsDefault = false,
                            ProductId = 1,
                            PuscharPrice = 18172727m,
                            Quantity = 100,
                            ReleaseYear = 2023,
                            SalePrice = 20990000m,
                            Tax = 10
                        },
                        new
                        {
                            Id = 6,
                            AfterDiscountPrice = 10000000m,
                            AttributeValueId = 12,
                            IsDefault = true,
                            ProductId = 2,
                            PuscharPrice = 9354545m,
                            Quantity = 50,
                            ReleaseYear = 2021,
                            SalePrice = 10290000m,
                            Tax = 10
                        },
                        new
                        {
                            Id = 7,
                            AfterDiscountPrice = 10000000m,
                            AttributeValueId = 12,
                            IsDefault = true,
                            ProductId = 3,
                            PuscharPrice = 9354545m,
                            Quantity = 100,
                            ReleaseYear = 2021,
                            SalePrice = 10290000m,
                            Tax = 10
                        },
                        new
                        {
                            Id = 8,
                            AfterDiscountPrice = 10000000m,
                            AttributeValueId = 12,
                            IsDefault = true,
                            ProductId = 4,
                            PuscharPrice = 9354545m,
                            Quantity = 100,
                            ReleaseYear = 2020,
                            SalePrice = 10290000m,
                            Tax = 10
                        },
                        new
                        {
                            Id = 9,
                            AfterDiscountPrice = 10000000m,
                            AttributeValueId = 12,
                            IsDefault = true,
                            ProductId = 5,
                            PuscharPrice = 9354545m,
                            Quantity = 100,
                            ReleaseYear = 2023,
                            SalePrice = 10290000m,
                            Tax = 10
                        },
                        new
                        {
                            Id = 10,
                            AfterDiscountPrice = 10000000m,
                            AttributeValueId = 12,
                            IsDefault = true,
                            ProductId = 6,
                            PuscharPrice = 9354545m,
                            Quantity = 100,
                            ReleaseYear = 2023,
                            SalePrice = 10290000m,
                            Tax = 10
                        },
                        new
                        {
                            Id = 11,
                            AfterDiscountPrice = 10000000m,
                            AttributeValueId = 1,
                            IsDefault = true,
                            ProductId = 7,
                            PuscharPrice = 9354545m,
                            Quantity = 100,
                            ReleaseYear = 2023,
                            SalePrice = 10290000m,
                            Tax = 10
                        },
                        new
                        {
                            Id = 12,
                            AfterDiscountPrice = 10000000m,
                            AttributeValueId = 1,
                            IsDefault = true,
                            ProductId = 8,
                            PuscharPrice = 9354545m,
                            Quantity = 100,
                            ReleaseYear = 2023,
                            SalePrice = 10290000m,
                            Tax = 10
                        },
                        new
                        {
                            Id = 13,
                            AfterDiscountPrice = 10000000m,
                            AttributeValueId = 1,
                            IsDefault = true,
                            ProductId = 9,
                            PuscharPrice = 9354545m,
                            Quantity = 100,
                            ReleaseYear = 2023,
                            SalePrice = 10290000m,
                            Tax = 10
                        },
                        new
                        {
                            Id = 14,
                            AfterDiscountPrice = 10000000m,
                            AttributeValueId = 1,
                            IsDefault = true,
                            ProductId = 10,
                            PuscharPrice = 9354545m,
                            Quantity = 100,
                            ReleaseYear = 2023,
                            SalePrice = 10290000m,
                            Tax = 10
                        },
                        new
                        {
                            Id = 15,
                            AfterDiscountPrice = 10000000m,
                            AttributeValueId = 1,
                            IsDefault = true,
                            ProductId = 11,
                            PuscharPrice = 9354545m,
                            Quantity = 100,
                            ReleaseYear = 2023,
                            SalePrice = 10290000m,
                            Tax = 10
                        },
                        new
                        {
                            Id = 16,
                            AfterDiscountPrice = 10000000m,
                            AttributeValueId = 1,
                            IsDefault = true,
                            ProductId = 12,
                            PuscharPrice = 9354545m,
                            Quantity = 100,
                            ReleaseYear = 2023,
                            SalePrice = 10290000m,
                            Tax = 10
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.ProductAddress", b =>
                {
                    b.Property<int>("ProductAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductAddressID"));

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductAddressID");

                    b.HasIndex("AddressID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductAddress");

                    b.HasData(
                        new
                        {
                            ProductAddressID = 1,
                            AddressID = 1,
                            ProductID = 1,
                            Quantity = 10
                        },
                        new
                        {
                            ProductAddressID = 2,
                            AddressID = 2,
                            ProductID = 2,
                            Quantity = 15
                        },
                        new
                        {
                            ProductAddressID = 3,
                            AddressID = 1,
                            ProductID = 3,
                            Quantity = 20
                        },
                        new
                        {
                            ProductAddressID = 4,
                            AddressID = 1,
                            ProductID = 4,
                            Quantity = 20
                        },
                        new
                        {
                            ProductAddressID = 5,
                            AddressID = 1,
                            ProductID = 5,
                            Quantity = 20
                        },
                        new
                        {
                            ProductAddressID = 6,
                            AddressID = 3,
                            ProductID = 6,
                            Quantity = 20
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.ProductPromotion", b =>
                {
                    b.Property<int>("ProductPromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductPromotionId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.HasKey("ProductPromotionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PromotionId");

                    b.ToTable("ProductPromotions");

                    b.HasData(
                        new
                        {
                            ProductPromotionId = 1,
                            ProductId = 1,
                            PromotionId = 11
                        },
                        new
                        {
                            ProductPromotionId = 2,
                            ProductId = 2,
                            PromotionId = 11
                        },
                        new
                        {
                            ProductPromotionId = 3,
                            ProductId = 3,
                            PromotionId = 11
                        },
                        new
                        {
                            ProductPromotionId = 4,
                            ProductId = 4,
                            PromotionId = 11
                        },
                        new
                        {
                            ProductPromotionId = 5,
                            ProductId = 5,
                            PromotionId = 11
                        },
                        new
                        {
                            ProductPromotionId = 6,
                            ProductId = 6,
                            PromotionId = 11
                        },
                        new
                        {
                            ProductPromotionId = 7,
                            ProductId = 7,
                            PromotionId = 11
                        },
                        new
                        {
                            ProductPromotionId = 8,
                            ProductId = 8,
                            PromotionId = 10
                        },
                        new
                        {
                            ProductPromotionId = 9,
                            ProductId = 9,
                            PromotionId = 10
                        },
                        new
                        {
                            ProductPromotionId = 10,
                            ProductId = 10,
                            PromotionId = 10
                        },
                        new
                        {
                            ProductPromotionId = 11,
                            ProductId = 11,
                            PromotionId = 10
                        },
                        new
                        {
                            ProductPromotionId = 12,
                            ProductId = 12,
                            PromotionId = 10
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.ProductTranslation", b =>
                {
                    b.Property<int>("ProductTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductTranslationId"));

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("ProductEAVId")
                        .HasColumnType("int");

                    b.Property<string>("TranslatedDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("TranslatedName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ProductTranslationId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProductEAVId");

                    b.ToTable("ProductTranslation", (string)null);

                    b.HasData(
                        new
                        {
                            ProductTranslationId = 1,
                            LanguageId = 1,
                            ProductEAVId = 1,
                            TranslatedDescription = "Translated Description 1",
                            TranslatedName = "Translated Name 1"
                        },
                        new
                        {
                            ProductTranslationId = 2,
                            LanguageId = 1,
                            ProductEAVId = 2,
                            TranslatedDescription = "Translated Description 2",
                            TranslatedName = "Translated Name 2"
                        },
                        new
                        {
                            ProductTranslationId = 3,
                            LanguageId = 1,
                            ProductEAVId = 3,
                            TranslatedDescription = "Translated Description 3",
                            TranslatedName = "Translated Name 3"
                        },
                        new
                        {
                            ProductTranslationId = 4,
                            LanguageId = 1,
                            ProductEAVId = 4,
                            TranslatedDescription = "Translated Description 4",
                            TranslatedName = "Translated Name 4"
                        },
                        new
                        {
                            ProductTranslationId = 5,
                            LanguageId = 1,
                            ProductEAVId = 5,
                            TranslatedDescription = "Translated Description 5",
                            TranslatedName = "Translated Name 5"
                        },
                        new
                        {
                            ProductTranslationId = 6,
                            LanguageId = 1,
                            ProductEAVId = 6,
                            TranslatedDescription = "Translated Description 6",
                            TranslatedName = "Translated Name 6"
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BackgroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BannerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("From")
                        .HasColumnType("datetime2");

                    b.Property<string>("HowToParticipate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("Percent")
                        .HasColumnType("float");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Promotions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1778),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1793),
                            Description = "Khuyến mãi giảm giá 10% cho tất cả các sản phẩm",
                            From = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1801),
                            IsActive = false,
                            Name = "Giảm giá 10%",
                            Percent = 10.0,
                            To = new DateTime(2024, 9, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1803),
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1797)
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1812),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1812),
                            Description = "Chương trình mua 1 tặng 1 cho sản phẩm đã chọn",
                            From = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1814),
                            IsActive = false,
                            Name = "Mua 1 tặng 1",
                            Percent = 0.0,
                            To = new DateTime(2024, 10, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1814),
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1813)
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1816),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1817),
                            Description = "Miễn phí vận chuyển cho đơn hàng trên 500,000 VNĐ",
                            From = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1818),
                            IsActive = false,
                            Name = "Miễn phí vận chuyển",
                            Percent = 0.0,
                            To = new DateTime(2024, 11, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1819),
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1817)
                        },
                        new
                        {
                            Id = 4,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1820),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1820),
                            Description = "Nhận voucher trị giá 100,000 VNĐ cho mỗi đơn hàng",
                            From = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1822),
                            IsActive = false,
                            Name = "Tặng voucher 100,000 VNĐ",
                            Percent = 0.0,
                            To = new DateTime(2024, 12, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1822),
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1821)
                        },
                        new
                        {
                            Id = 5,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1824),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1824),
                            Description = "Khuyến mãi giảm giá 50% cho tất cả sản phẩm mới ra mắt",
                            From = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1826),
                            IsActive = false,
                            Name = "Giảm 50% cho sản phẩm mới",
                            Percent = 50.0,
                            To = new DateTime(2025, 1, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1826),
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1825)
                        },
                        new
                        {
                            Id = 6,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1828),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1829),
                            Description = "Nhận quà tặng hấp dẫn khi đặt hàng trên 1,000,000 VNĐ",
                            From = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1830),
                            IsActive = false,
                            Name = "Tặng quà cho đơn hàng trên 1,000,000 VNĐ",
                            Percent = 0.0,
                            To = new DateTime(2025, 2, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1831),
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1829)
                        },
                        new
                        {
                            Id = 7,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1834),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1835),
                            Description = "Khuyến mãi giảm giá 20% cho tất cả sản phẩm phụ kiện",
                            From = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1836),
                            IsActive = false,
                            Name = "Giảm 20% cho sản phẩm phụ kiện",
                            Percent = 20.0,
                            To = new DateTime(2025, 3, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1837),
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1835)
                        },
                        new
                        {
                            Id = 8,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1838),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1839),
                            Description = "Chương trình đổi sản phẩm cũ lấy sản phẩm mới với giá ưu đãi",
                            From = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1840),
                            IsActive = false,
                            Name = "Đổi cũ lấy mới",
                            Percent = 0.0,
                            To = new DateTime(2025, 4, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1841),
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1839)
                        },
                        new
                        {
                            Id = 9,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1842),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1842),
                            Description = "Mua hàng tặng phiếu mua hàng trị giá 200,000 VNĐ",
                            From = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1843),
                            IsActive = false,
                            Name = "Mua hàng tặng phiếu mua hàng",
                            Percent = 0.0,
                            To = new DateTime(2025, 5, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1844),
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1843)
                        },
                        new
                        {
                            Id = 10,
                            BannerUrl = "/Images/Component/BannerPromotion1.gif",
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1845),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1846),
                            Description = "Siêu sale đồng giảm 50% giá sản phẩm",
                            From = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1847),
                            IsActive = true,
                            Name = "Đồng giảm giá 50%",
                            Percent = 50.0,
                            To = new DateTime(2025, 6, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1848),
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1846)
                        },
                        new
                        {
                            Id = 11,
                            BannerUrl = "/Images/Component/BannerPromotion2.webp",
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1851),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1852),
                            Description = "Siêu giảm giá mùa Ơ-RÔ",
                            From = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1853),
                            IsActive = true,
                            Name = "Sôi động cùng mùa Ơ-rô",
                            Percent = 0.0,
                            To = new DateTime(2025, 6, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1854),
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 510, DateTimeKind.Local).AddTicks(1852)
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.ShippingOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OrderCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ShippingOrders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9698),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9694),
                            Description = "",
                            InvoiceId = 3,
                            Name = "",
                            OrderCode = "L6AHHM",
                            Price = 200000.0,
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9694),
                            UserId = new Guid("aa7c5218-4f1e-4ac6-a3b4-08dcb162e29e")
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.TimeRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TimeRanges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxPrice = 1000000m,
                            MinPrice = 0m,
                            Name = "0 - 1 triệu"
                        },
                        new
                        {
                            Id = 2,
                            MaxPrice = 2000000m,
                            MinPrice = 1000000m,
                            Name = "1 triệu - 2 triệu"
                        },
                        new
                        {
                            Id = 3,
                            MaxPrice = 3000000m,
                            MinPrice = 2000000m,
                            Name = "2 triệu - 3 triệu"
                        },
                        new
                        {
                            Id = 4,
                            MaxPrice = 4000000m,
                            MinPrice = 3000000m,
                            Name = "3 triệu - 4 triệu"
                        },
                        new
                        {
                            Id = 5,
                            MaxPrice = 5000000m,
                            MinPrice = 4000000m,
                            Name = "4 triệu - 5 triệu"
                        },
                        new
                        {
                            Id = 6,
                            MaxPrice = 6000000m,
                            MinPrice = 5000000m,
                            Name = "5 triệu - 6 triệu"
                        },
                        new
                        {
                            Id = 7,
                            MaxPrice = 7000000m,
                            MinPrice = 6000000m,
                            Name = "6 triệu - 7 triệu"
                        },
                        new
                        {
                            Id = 8,
                            MaxPrice = 8000000m,
                            MinPrice = 7000000m,
                            Name = "7 triệu - 8 triệu"
                        },
                        new
                        {
                            Id = 9,
                            MaxPrice = 9000000m,
                            MinPrice = 8000000m,
                            Name = "8 triệu - 9 triệu"
                        },
                        new
                        {
                            Id = 10,
                            MaxPrice = 10000000m,
                            MinPrice = 9000000m,
                            Name = "9 triệu - 10 triệu"
                        },
                        new
                        {
                            Id = 11,
                            MaxPrice = 999999999m,
                            MinPrice = 10000000m,
                            Name = "Hơn 10 triệu"
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiscountByPercent")
                        .HasColumnType("int");

                    b.Property<decimal?>("DiscountByPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Vouchers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9638),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9633),
                            Description = "",
                            DiscountByPercent = 10,
                            DiscountByPrice = 0m,
                            Name = "VOUCHER10",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9634)
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9641),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9639),
                            Description = "",
                            DiscountByPercent = 20,
                            DiscountByPrice = 0m,
                            Name = "VOUCHER20",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9640)
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9650),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9643),
                            Description = "",
                            DiscountByPercent = 0,
                            DiscountByPrice = 300000m,
                            Name = "VOUCHER300000",
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9643)
                        });
                });

            modelBuilder.Entity("DATN.Core.Model.VoucherUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("VoucherUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = new Guid("00bb44d1-f674-49f6-bdae-afb143ab9749"),
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9669),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9669),
                            Description = "",
                            From = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9672),
                            IsDeleted = true,
                            Name = "",
                            To = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9670),
                            VoucherId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = new Guid("00bb44d1-f674-49f6-bdae-afb143ab9749"),
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9674),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9674),
                            Description = "",
                            From = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9676),
                            IsDeleted = false,
                            Name = "",
                            To = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9675),
                            VoucherId = 2
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = new Guid("00bb44d1-f674-49f6-bdae-afb143ab9749"),
                            CreateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9677),
                            DeleteAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9678),
                            Description = "",
                            From = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9680),
                            IsDeleted = false,
                            Name = "",
                            To = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            UpdateAt = new DateTime(2024, 8, 27, 10, 52, 21, 823, DateTimeKind.Local).AddTicks(9678),
                            VoucherId = 3
                        });
                });

            modelBuilder.Entity("DATN.Core.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSentMail")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2753c921-2304-4f8d-b8d5-75229d3b20d6"),
                            AccessFailedCount = 0,
                            Address = "123 Main St, City A",
                            ConcurrencyStamp = "c6d3fbd5-2449-400d-b74e-43e769c6f1c3",
                            Description = "Admin",
                            Dob = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            IsSentMail = false,
                            LastLoginTime = new DateTime(2024, 8, 27, 3, 52, 21, 591, DateTimeKind.Utc).AddTicks(2005),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJHwfC6vMZH6jpbDD6iYqG12A4/tjF1OUsam9jyiux+6w3D8edWPYH/49fcvsM5abg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com",
                            isActive = true
                        },
                        new
                        {
                            Id = new Guid("00bb44d1-f674-49f6-bdae-afb143ab9749"),
                            AccessFailedCount = 0,
                            Address = "456 Oak St, City B",
                            ConcurrencyStamp = "8a2f3780-0834-4e1b-beed-fb7fca3da736",
                            Description = "Customer",
                            Dob = new DateTime(1991, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Customer",
                            IsSentMail = false,
                            LastLoginTime = new DateTime(2024, 8, 27, 3, 52, 21, 714, DateTimeKind.Utc).AddTicks(6269),
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@GMAIL.COM",
                            NormalizedUserName = "CUSTOMER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOb+4wOWTch7O6Ef4SzAgq2Jk/FIJS9V4fPiSW52j8n1aBfnN/F3LbE5h1+wXfFwuQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "customer@gmail.com",
                            isActive = true
                        },
                        new
                        {
                            Id = new Guid("aa7c5218-4f1e-4ac6-a3b4-08dcb162e29e"),
                            AccessFailedCount = 0,
                            Address = "456 Oak St, City B",
                            ConcurrencyStamp = "bcd94b3a-33fb-4b3e-b13f-fa841ae786ba",
                            Description = "Customer",
                            Dob = new DateTime(1991, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Customer",
                            IsSentMail = false,
                            LastLoginTime = new DateTime(2024, 8, 27, 3, 52, 21, 823, DateTimeKind.Utc).AddTicks(7700),
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER2@GMAIL.COM",
                            NormalizedUserName = "CUSTOMER2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN+G3PZwWKeH8pnbRk0M2sDNKHSzZf8vITS5cE/Da5F3NcSCjcfZtT9vcw1dJLjzNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "customer2@gmail.com",
                            isActive = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8fd818f-63f1-49ee-bec5-f7b66cafbfca"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("fe0e9c2d-6abd-4f73-a635-63fc58ec700e"),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("2753c921-2304-4f8d-b8d5-75229d3b20d6"),
                            RoleId = new Guid("b8fd818f-63f1-49ee-bec5-f7b66cafbfca")
                        },
                        new
                        {
                            UserId = new Guid("00bb44d1-f674-49f6-bdae-afb143ab9749"),
                            RoleId = new Guid("fe0e9c2d-6abd-4f73-a635-63fc58ec700e")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DATN.Core.Model.Category", b =>
                {
                    b.HasOne("DATN.Core.Model.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("DATN.Core.Model.CategoryProduct", b =>
                {
                    b.HasOne("DATN.Core.Model.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Core.Model.Product.Product", "Product")
                        .WithMany("CategoryProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DATN.Core.Model.CategoryTimeRange", b =>
                {
                    b.HasOne("DATN.Core.Model.Category", "Category")
                        .WithMany("CategoryTimeRanges")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Core.Model.TimeRange", "TimeRange")
                        .WithMany("CategoryTimeRanges")
                        .HasForeignKey("TimeRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("TimeRange");
                });

            modelBuilder.Entity("DATN.Core.Model.CategoryTranslation", b =>
                {
                    b.HasOne("DATN.Core.Model.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Core.Model.Language", "Language")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("DATN.Core.Model.Comment", b =>
                {
                    b.HasOne("DATN.Core.Model.InvoiceDetail", "InvoiceDetail")
                        .WithOne("Comment")
                        .HasForeignKey("DATN.Core.Model.Comment", "InvoiceDetailId");

                    b.HasOne("DATN.Core.Model.Product.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Core.Models.AppUser", "AppUser")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("InvoiceDetail");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DATN.Core.Model.Image", b =>
                {
                    b.HasOne("DATN.Core.Model.Product.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId");

                    b.HasOne("DATN.Core.Model.ImageType", "Type")
                        .WithMany("Images")
                        .HasForeignKey("TypeId");

                    b.Navigation("Product");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DATN.Core.Model.Interested", b =>
                {
                    b.HasOne("DATN.Core.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Core.Model.Product.Product", "Product")
                        .WithMany("Interesteds")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DATN.Core.Model.Invoice", b =>
                {
                    b.HasOne("DATN.Core.Models.AppUser", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Core.Model.VoucherUser", "VoucherUser")
                        .WithMany()
                        .HasForeignKey("VoucherUserId");

                    b.Navigation("User");

                    b.Navigation("VoucherUser");
                });

            modelBuilder.Entity("DATN.Core.Model.InvoiceDetail", b =>
                {
                    b.HasOne("DATN.Core.Model.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("DATN.Core.Model.Product.ProductAttribute", "ProductAttribute")
                        .WithMany()
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("DATN.Core.Model.PaymentInfo", b =>
                {
                    b.HasOne("DATN.Core.Model.Invoice", "Invoice")
                        .WithOne("PaymentInfo")
                        .HasForeignKey("DATN.Core.Model.PaymentInfo", "InvoiceId");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("DATN.Core.Model.Product.AttributeValue", b =>
                {
                    b.HasOne("DATN.Core.Model.Product.Attributes", "Attributes")
                        .WithMany("AttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("DATN.Core.Model.Product.Attributes", b =>
                {
                    b.HasOne("DATN.Core.Model.Product.Product", "Product")
                        .WithMany("Attributes")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DATN.Core.Model.Product.Product", b =>
                {
                    b.HasOne("DATN.Core.Model.Brand", "Brand")
                        .WithMany("ProductEAVs")
                        .HasForeignKey("BrandId");

                    b.HasOne("DATN.Core.Model.Category", null)
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("DATN.Core.Model.Origin", "Origin")
                        .WithMany("Products")
                        .HasForeignKey("OriginId");

                    b.Navigation("Brand");

                    b.Navigation("Origin");
                });

            modelBuilder.Entity("DATN.Core.Model.Product.ProductAttribute", b =>
                {
                    b.HasOne("DATN.Core.Model.Product.AttributeValue", "AttributeValue")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("AttributeValueId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DATN.Core.Model.Product.Product", "Product")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AttributeValue");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DATN.Core.Model.ProductAddress", b =>
                {
                    b.HasOne("DATN.Core.Model.Address", "Address")
                        .WithMany("ProductAddresss")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Core.Model.Product.Product", "ProductEAV")
                        .WithMany("ProductAddresss")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("ProductEAV");
                });

            modelBuilder.Entity("DATN.Core.Model.ProductPromotion", b =>
                {
                    b.HasOne("DATN.Core.Model.Product.Product", "Product")
                        .WithMany("PromotionProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Core.Model.Promotion", "Promotion")
                        .WithMany("ProductPromotions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("DATN.Core.Model.ProductTranslation", b =>
                {
                    b.HasOne("DATN.Core.Model.Language", "Language")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Core.Model.Product.Product", "ProductEAV")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("ProductEAVId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProductEAV");
                });

            modelBuilder.Entity("DATN.Core.Model.ShippingOrder", b =>
                {
                    b.HasOne("DATN.Core.Model.Invoice", "Invoice")
                        .WithOne("ShippingOrder")
                        .HasForeignKey("DATN.Core.Model.ShippingOrder", "InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Core.Models.AppUser", "User")
                        .WithMany("ShippingOrders")
                        .HasForeignKey("UserId");

                    b.Navigation("Invoice");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DATN.Core.Model.VoucherUser", b =>
                {
                    b.HasOne("DATN.Core.Models.AppUser", "AppUser")
                        .WithMany("VoucherUsers")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Core.Model.Voucher", "Voucher")
                        .WithMany("VoucherUsers")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DATN.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DATN.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DATN.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DATN.Core.Model.Address", b =>
                {
                    b.Navigation("ProductAddresss");
                });

            modelBuilder.Entity("DATN.Core.Model.Brand", b =>
                {
                    b.Navigation("ProductEAVs");
                });

            modelBuilder.Entity("DATN.Core.Model.Category", b =>
                {
                    b.Navigation("CategoryTimeRanges");

                    b.Navigation("CategoryTranslations");

                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("DATN.Core.Model.ImageType", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("DATN.Core.Model.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");

                    b.Navigation("PaymentInfo");

                    b.Navigation("ShippingOrder");
                });

            modelBuilder.Entity("DATN.Core.Model.InvoiceDetail", b =>
                {
                    b.Navigation("Comment");
                });

            modelBuilder.Entity("DATN.Core.Model.Language", b =>
                {
                    b.Navigation("CategoryTranslations");

                    b.Navigation("ProductTranslations");
                });

            modelBuilder.Entity("DATN.Core.Model.Origin", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DATN.Core.Model.Product.AttributeValue", b =>
                {
                    b.Navigation("ProductAttributes");
                });

            modelBuilder.Entity("DATN.Core.Model.Product.Attributes", b =>
                {
                    b.Navigation("AttributeValues");
                });

            modelBuilder.Entity("DATN.Core.Model.Product.Product", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("CategoryProducts");

                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Interesteds");

                    b.Navigation("ProductAddresss");

                    b.Navigation("ProductAttributes");

                    b.Navigation("ProductTranslations");

                    b.Navigation("PromotionProducts");
                });

            modelBuilder.Entity("DATN.Core.Model.Promotion", b =>
                {
                    b.Navigation("ProductPromotions");
                });

            modelBuilder.Entity("DATN.Core.Model.TimeRange", b =>
                {
                    b.Navigation("CategoryTimeRanges");
                });

            modelBuilder.Entity("DATN.Core.Model.Voucher", b =>
                {
                    b.Navigation("VoucherUsers");
                });

            modelBuilder.Entity("DATN.Core.Models.AppUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Invoices");

                    b.Navigation("ShippingOrders");

                    b.Navigation("VoucherUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
