@model DATN.Core.ViewModel.AttributeVM.AtttributeVariation.CreateVariantVM

<!-- Styles -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" />
<!-- Or for RTL support -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.rtl.min.css" />

<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/jquery@3.5.0/dist/jquery.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

<div class="container-fluid px-4">
    <div class="row">
        <div class="col-8"></div>
        <h1 class="mt-4">Thêm thuộc tính</h1>
    </div>
    <div class="row">
        <div class="col">
            <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#attributeValueModal">Thêm giá trị</button>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-8 ms-4">
        <form id="category-form" asp-action="Create" asp-controller="Variants" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label">Tên thuộc tính</label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group form-switch align-content-around">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsActive" id="flexSwitchCheckDefault" />
                    Hoạt động
                </label>
            </div>
            <div class="form-group form-check align-content-">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsShow" />
                    Hiển thị
                </label>
            </div>
            <div class="form-group">
                <label asp-for="AttributeValueId" class="control-label">Chọn biến thể</label>
                <select asp-for="AttributeValueId" asp-items="ViewBag.listAttributes" class="form-select" id="multiple-select-custom-field" data-placeholder="Hãy chọn ít nhất một biến thế" multiple>
                    </select>
                <span asp-validation-for="AttributeValueId" class="text-danger"></span>
            </div>
            <div class="form-group float-end mt-2">
                <input type="submit" value="Create" class="btn btn-primary" />
                <button class="btn btn-success" asp-action="Index">Back to List</button>
            </div>
        </form>
    </div>
</div>

@* <script>
   
</script> *@

<!-- Modal -->
<div class="modal fade" id="attributeValueModal" tabindex="-1" aria-labelledby="attributeValueModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="attributeValueModalLabel">Thêm giá trị thuộc tính</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="attributeValueForm">
                    <div id="dynamic-fields">
                        <div class="form-group">
                            <label for="value1" class="control-label">Giá trị 1</label>
                            <div class="input-group">
                                <input type="text" id="value1" name="value1" class="form-control" required />
                                <button type="button" class="btn btn-danger removeFieldButton">Xóa</button>
                            </div>
                            <span id="valueError1" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-group">
                        <button type="button" id="addFieldButton" class="btn btn-secondary">Thêm ô input</button>
                        <button type="button" id="createValueButton" class="btn btn-primary">Tạo mới</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>



<!-- Thông báo kết quả -->
<div id="resultMessage" class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
    <div id="resultMessageContent" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">Thông báo</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body"></div>
    </div>
</div>

<script>

    $('#multiple-select-custom-field').select2({
        theme: "bootstrap-5",
        width: $(this).data('width') ? $(this).data('width') : $(this).hasClass('w-100') ? '100%' : 'style',
        placeholder: $(this).data('placeholder'),
        closeOnSelect: false,
        tags: true
    });

    $(document).ready(function () {
        $('.select2').select2();
    });

    document.getElementById("addFieldButton").addEventListener("click", function () {
        const dynamicFields = document.getElementById("dynamic-fields");
        const fieldCount = dynamicFields.getElementsByClassName("form-group").length + 1;
        const newField = `
                    <div class="form-group">
                        <label for="value${fieldCount}" class="control-label">Giá trị ${fieldCount}</label>
                        <div class="input-group">
                            <input type="text" id="value${fieldCount}" name="value${fieldCount}" class="form-control" required />
                            <button type="button" class="btn btn-danger removeFieldButton">Xóa</button>
                        </div>
                        <span id="valueError${fieldCount}" class="text-danger"></span>
                    </div>
                `;
        dynamicFields.insertAdjacentHTML('beforeend', newField);
        addRemoveButtonEvent();
    });

    function addRemoveButtonEvent() {
        const removeButtons = document.querySelectorAll(".removeFieldButton");
        removeButtons.forEach(button => {
            button.addEventListener("click", function () {
                const formGroup = button.closest(".form-group");
                const dynamicFields = document.getElementById("dynamic-fields");
                if (dynamicFields.getElementsByClassName("form-group").length > 1) {
                    formGroup.remove();
                } else {
                    showResultMessage("Phải có ít nhất một giá trị.");
                }
            });
        });
    }

    document.getElementById("createValueButton").addEventListener("click", function () {
        if (!confirm("Bạn có chắc chắn muốn tạo không?")) {
            return;
        }

        const dynamicFields = document.getElementById("dynamic-fields").getElementsByClassName("form-group");
        const values = [];
        let valid = true;

        for (let i = 0; i < dynamicFields.length; i++) {
            const input = dynamicFields[i].getElementsByTagName("input")[0];
            const error = dynamicFields[i].getElementsByClassName("text-danger")[0];
            const value = input.value.trim();

            error.innerText = '';

            if (!value) {
                error.innerText = 'Giá trị không được để trống';
                valid = false;
            } else {
                values.push({ Value: value, errorElement: error });
            }
        }

        if (!valid) return;

        // Kiểm tra tồn tại giá trị
        checkExistingValues(values).then(exists => {
            if (exists) return;

            fetch('https://localhost:7095/api/AttributeValues/CreateMultipleValue', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(values.map(v => ({ Value: v.Value })))
            })
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    } else {
                        return response.json().then(err => { throw err; });
                    }
                })
                .then(result => {
                    showResultMessage('Thêm thành công');
                    const attributeValueModal = new bootstrap.Modal(document.getElementById('attributeValueModal'));
                    attributeValueModal.hide();
                    location.reload();
                })
                .catch(error => {
                    if (error && error.message) {
                        showResultMessage(error.message);
                    } else {
                        showResultMessage("Có lỗi xảy ra. Vui lòng thử lại.");
                    }
                });
        });
    });

    function checkExistingValues(values) {
        return Promise.all(values.map(v => checkExistingValue(v)))
            .then(results => {
                const exists = results.some(result => result);
                return exists;
            });
    }

    function checkExistingValue(valueObj) {
        return fetch(`https://localhost:7095/api/AttributeValues/CheckExistingValue?value=${encodeURIComponent(valueObj.Value)}`)
            .then(response => {
                if (response.status === 409) {
                     .errorElement.innerText = "Giá trị đã tồn tại";
                    return true;
                }
                return false;
            });
    }

    function showResultMessage(message) {
        const toastBody = document.querySelector('#resultMessage .toast-body');
        toastBody.innerText = message;
        const toast = new bootstrap.Toast(document.getElementById('resultMessageContent'));
        toast.show();
    }

    document.addEventListener("DOMContentLoaded", function () {
        addRemoveButtonEvent();
    });
</script>




