@using System.Linq
@using System.Globalization
@using DATN.Core.ViewModel.Paging
@model ProductPaging

@{
    var initialProducts = Model.Items.Take(5).ToList();
    var hiddenProducts = Model.Items.Skip(5).ToList();
    var hiddenProductsJson = System.Text.Json.JsonSerializer.Serialize(hiddenProducts); // Chuyển đổi danh sách sản phẩm còn lại thành JSON
    int totalRecord = (int)Model.TotalRecord;
    int totalPages = (int)Model.TotalPages;
    int currentPage = Model.CurrentPage;
    int pageSize = Model.PageSize;

    int startPage = Math.Max(1, currentPage - 2);
    int endPage = Math.Min(totalPages, currentPage + 2);

    int startIndex = ((currentPage - 1) * pageSize) + 1;
    int endIndex = (currentPage == totalPages) ? totalRecord : startIndex + pageSize - 1;
    if (endIndex > totalRecord) endIndex = totalRecord;

    int index = (currentPage - 1) * 10 + 1;
    int stt = (currentPage - 1) * pageSize;
}

<style>
    .gridProduct {
        margin: 20px auto; /* Khoảng cách từ đầu trang và chân trang, căn giữa */
        padding: 0 20px; /* Khoảng cách từ lề trái và phải */
        max-width: 1400px; /* Đặt giới hạn chiều rộng tối đa để căn giữa */
    }

    .product-row {
        display: grid; /* Sử dụng CSS Grid để sắp xếp các thẻ sản phẩm */
        grid-template-columns: repeat(5, 1fr); /* Tạo 5 cột với kích thước bằng nhau */
        gap: 20px; /* Khoảng cách giữa các thẻ sản phẩm */
    }

    .product-item {
        box-sizing: border-box;
        margin-bottom: 30px; /* Khoảng cách giữa các thẻ sản phẩm */
        width: 100%; /* Chiều rộng của mỗi thẻ sản phẩm */
    }

    .card {
        border-radius: 8px; /* Kích thước bo góc */
        height: 380px; /* Điều chỉnh chiều cao của thẻ sản phẩm */
        width: 100%; /* Chiều rộng của thẻ sản phẩm chiếm toàn bộ chiều rộng của cột */
        display: flex; /* Sử dụng Flexbox trong thẻ sản phẩm */
        flex-direction: column; /* Sắp xếp các phần tử theo chiều dọc */
        justify-content: space-between; /* Phân bố khoảng cách giữa các phần tử trong thẻ */
        position: relative; /* Để có thể định vị các phần tử con */
        overflow: hidden; /* Ẩn phần thừa của hình ảnh và nội dung */
    }

    .card-body {
        display: flex; /* Sử dụng Flexbox */
        flex-direction: column; /* Sắp xếp các phần tử theo chiều dọc */
        flex: 1; /* Đảm bảo phần thân thẻ có thể mở rộng để chiếm không gian còn lại */
        padding: 15px; /* Khoảng cách từ các cạnh của phần thân thẻ */
        margin-bottom: 50px; /* Tạo khoảng trống cho nút chi tiết */
    }

    .card-img-top {
        height: 160px; /* Chiều cao của hình ảnh */
        width: 100%; /* Chiều rộng của hình ảnh chiếm toàn bộ chiều rộng thẻ */
        object-fit: cover; /* Đảm bảo hình ảnh không bị biến dạng và chiếm toàn bộ thẻ */
        border-top-left-radius: 8px; /* Bo góc trên bên trái */
        border-top-right-radius: 8px; /* Bo góc trên bên phải */
        padding: 8px; /* Khoảng cách từ các cạnh của hình ảnh */
    }

    .card-text {
        margin-bottom: auto; /* Đẩy phần tử card-text lên trên để tạo không gian cho nút chi tiết */
    }

    .rating {
        margin-bottom: 5px; /* Khoảng cách giữa rating và nút chi tiết */
    }

    .product-detail {
        position: absolute; /* Định vị tuyệt đối */
        bottom: 10px; /* Khoảng cách từ đáy thẻ */
        left: 50%;
        transform: translateX(-50%);
        background-color: #007bff;
        color: white;
        padding: 10px 15px; /* Khoảng cách bên trong nút */
        border-radius: 5px;
        cursor: pointer;
        text-align: center;
        width: 80%;
        z-index: 10;
        transition: all 0.3s ease;
    }

        .product-detail:hover {
            background-color: #0056b3;
            transform: translate(-50%, -5px);
        }

    h3 {
        font-size: 24px; /* Thay đổi kích thước chữ cho thẻ tiêu đề */
        margin-bottom: 20px; /* Khoảng cách dưới tiêu đề */
        border-bottom: 2px solid #ddd; /* Đường phân cách dưới tiêu đề */
        padding-bottom: 10px; /* Khoảng cách từ nội dung đến đường phân cách */
    }

    .no-results {
        text-align: center; /* Căn giữa văn bản */
        font-size: 32px; /* Kích thước chữ lớn hơn */
        margin-top: 200px; /* Khoảng cách từ đầu trang */
        margin-bottom: 230px; /* Khoảng cách từ chân trang */
        color: #6c757d; /* Màu chữ */
    }
</style>
<div class="gridProduct">
    <h3 >Sản phẩm tìm kiếm</h3>
    @if (Model.Items == null || !Model.Items.Any())
    {
        <h1 class="no-results">Không tìm thấy kết quả nào</h1>
    }
    else
    {
        <div class="product-row" id="productContainer">
            @foreach (var product in Model.Items.ToList())
            {
                <div class="product-item">
                    <div class="card">
                        <img src="@product.Images.FirstOrDefault(p => p.IsDefault == true).ImagePath" class="card-img-top" alt="@product.Name Image">
                        <div class="card-body">
                            <div class="card-title text-ellipsis">@product.Name</div>
                            <p class="card-text">
                                <span style="position: relative;">
                                    @String.Format(new CultureInfo("vi-VN"), "{0:N0}", product.DefaultPrice)đ
                                    <span style="content: ''; position: absolute; top: 50%; left: 0; right: 0; height: 1px; background-color: rgba(0, 0, 0, 0.5); pointer-events: none;"></span>
                                </span>
                                <strong>-@(product.Discount)%</strong>
                                <br />
                                <span class="text-danger fw-bolder">@String.Format(new CultureInfo("vi-VN"), "{0:N0}", product.DefaultPrice)đ</span>
                            </p>
                            <div class="rating d-flex align-items-center">
                                <span class="text-dark" style="padding-right: 8px; font-size:14px;">@product.Rating</span>
                                <i class="fa fa-star" style="padding-right: 8px; font-size:14px;"></i>
                                <p style="margin: 0; font-size: 14px; color: #999999;">(@product.RateCount)</p>
                            </div>
                            <div class="product-detail" product-id="@product.Id">Xem chi tiết</div>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="row d-flex justify-content-center align-content-center mt-3 p-0">
            <div class="col d-flex flex-row">
                <div class="center">
                    <span class="fst-italic">Hiện <strong>@(Model.Items.Count == 0 ? 0 : startIndex) - @endIndex</strong> trong <strong> @totalRecord</strong> bản ghi</span>
                </div>
            </div>
            @if (totalPages > 1)
            {
                <ul class="pagination justify-content-end col m-0">
                    <li class="page-item @((currentPage == 1) ? "disabled" : "")">
                        <a onclick="event.preventDefault(); setCurrentPage('@(currentPage-1)')" class="page-link link-paging" asp-area="Admin" asp-controller="Category" asp-action="Index"
                           asp-route-currentPage="@(Model.CurrentPage-1)" tabindex="-1" aria-disabled="true">Previous</a>
                    </li>

                    @if (currentPage > 3)
                    {
                        <li class="page-item disabled"><span class="page-link">...</span></li>
                    }

                    @for (int pageIndex = startPage; pageIndex <= endPage; pageIndex++)
                    {
                        <li class="page-item">
                            <a onclick="event.preventDefault(); setCurrentPage('@pageIndex')" class="page-link @(pageIndex == currentPage ? "link-active" : "") link-paging" asp-area="Admin" asp-controller="Category" asp-action="Index"
                               asp-route-currentPage="@(Model.CurrentPage-1)">@pageIndex</a>
                        </li>
                    }

                    @if (currentPage < Math.Ceiling(totalRecord / 10.0) - 2)
                    {
                        <li class="page-item disabled"><span class="page-link">...</span></li>
                    }

                    <li class="page-item @((currentPage == totalPages) ? "disabled" : "")">
                        <a onclick="event.preventDefault(); setCurrentPage('@(currentPage + 1)')" class="page-link link-paging" asp-area="Admin" asp-controller="Category" asp-action="Index"
                           asp-route-currentPage="@(Model.CurrentPage-1)">Next</a>
                    </li>
                </ul>
            }
        </div>
    }

</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var productContainer = document.getElementById('productContainer');
        var hiddenProducts = @Html.Raw(hiddenProductsJson); // Lấy danh sách sản phẩm còn lại

        if (typeof hiddenProducts === 'string') {
            hiddenProducts = JSON.parse(hiddenProducts);
        }
        var products = document.getElementsByClassName("product-detail");
        for (var product of products) {
            product.addEventListener("click", (e) => {
                var id = e.target.getAttribute("product-id");
                location.href = `/product/edit?id=${id}`;
            });
        }
    }); 
</script>