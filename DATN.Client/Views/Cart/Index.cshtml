@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "Cart";
    ViewData["PageCSS"] = "cart.css";
    var voucher = ViewData["Voucher"] == null ? new List<DATN.Core.Model.VoucherUser>() : ViewData["Voucher"] as List<DATN.Core.Model.VoucherUser>;
    var product = ViewData["product"] == null ? new List<DATN.Core.ViewModel.ProductVM.ProductVM>() : ViewData["product"] as List<DATN.Core.ViewModel.ProductVM.ProductVM>;
    var invoiceId = TempData["invoiceId"];
    var paymentStatus = TempData["paymentStatus"];
}

<link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.0.2/css/bootstrap.min.css'>
<script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.2.0/js/bootstrap.min.js'></script>


<div class="cart-container">
    <section>
        <div class="middleCart">
            <div style="padding: 10px"></div>
            <!-- danh sách sản phẩm-->
            <ul class="listing-cart">
            </ul>


            <div class="total-provisional">
                <span class="total-product">
                    Tạm tính
                    <span>(0 sản phẩm)</span>
                </span>
                <span class="total-price">
                    0 đ
                </span>
            </div>
            <div class="info-customer">
                <h4 style="font-size: 16px;font-weight: normal;text-transform: uppercase">Thông tin khách hàng</h4>
                <div class="choosegender">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1">
                        <label class="form-check-label" for="flexRadioDefault1">
                            Nam
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2" checked>
                        <label class="form-check-label" for="flexRadioDefault2">
                            Nữ
                        </label>
                    </div>
                </div>
                <div class="fillinfo">
                    <div class="row">
                        <input class="form-control form-control-sm required-field email-validate" type="text" placeholder="First name" aria-label=".form-control-sm example" id="customerFirstName" required>
                        <input class="form-control form-control-sm required-field" type="text" placeholder="Last name" aria-label=".form-control-sm example"
                               id="customerLastName" required>
                    </div>
                    <div class="row">
                        <input class="form-control form-control-sm required-field" type="email" placeholder="Email" aria-label=".form-control-sm example">
                        <input class="form-control form-control-sm required-field" type="tel" placeholder="Phone number" aria-label=".form-control-sm example" id="customerPhoneNumber" required>
                    </div>
                </div>
            </div>

            <div class="choosegetgoods">
                <h4 style="font-size: 16px;font-weight: normal;text-transform: uppercase">Địa chỉ giao hàng</h4>
                <div class="filladdress">
                    <div class="row">
                        <div class="col">
                            <select id="provinceSelect" class="form-select address-input address-input-select" aria-label="Tỉnh/Thành Phố">
                                <option selected disabled hidden>Tỉnh/Thành Phố</option>

                            </select>
                            <select id="wardSelect" class="form-select address-input address-input-select" aria-label="Xã/Phường">
                                <option selected disabled hidden>Xã/Phường</option>
                            </select>
                        </div>
                        <div class="col">
                            <select id="districtSelect" class="form-select address-input address-input-select" aria-label="Quận/Huyện">
                                <option selected disabled hidden>Quận/Huyện</option>

                            </select>
                            <input required class="form-control form-control address-input address-input-text" type="text" placeholder="số nhà, tên đường" aria-label="Số nhà, tên đường" id="address">
                        </div>
                    </div>
                </div>
                <div onclick="CalculateShippingFee()" class="addAddress btn btn-success">Xác nhận địa chỉ giao hàng</div>
            </div>


            @* <div class="anotheroption" style="padding: 10px 10px 30px ">
                <input class="form-control form-control" type="text" placeholder="Ghi chú (Không bắt buộc)" aria-label="Ghi chú">
            </div> *@
            <div class="finaltotal">
                <div class="promotioncodebox_button" onclick="ShowInputPmtCode()">
                    <span>Sử dụng mã giảm giá</span>
                    <span id="arrow" class="arrow">&#9660;</span>
                </div>
                <div class="promotioncodebox_input" id="promotioncodebox_input">
                    <div class="form-group">
                        <label class="control-label">Mã giảm giá</label>
                        <select class="form-control" id="voucherSelect">
                            <option value="0"> Chọn mã giảm giá</option>
                            @foreach (var item in voucher)
                            {
                                <option value="@item.Id" percent="@item.Voucher.DiscountByPercent" price="@item.Voucher.DiscountByPrice">@item.Voucher.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="totalprice price-box">
                    <strong class="labeltotal">Tiền hàng: </strong>
                    <strong class="red-price pricetotal">0 VNĐ</strong>
                </div>
                <div class="shippingFee price-box">
                    <strong class="labeltotal">Phí ship:</strong>
                    <strong class="red-price feeShipping">Chưa chọn địa chỉ giao hàng</strong>
                </div>
                <div class="lastprice price-box">
                    <strong class="labeltotal">Tổng tiền: </strong>
                    <strong class="red-price pricelast">Chưa chọn địa chỉ giao hàng</strong>
                </div>
                <button type="button" class="submitorder">Đặt hàng</button>
            </div>
        </div>
    </section>
</div>


<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title donate-btn" id="exampleModalLabel">Chọn phương thức thanh toán</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="model-body-1">
                    <p>Chọn phương thức thanh toán:</p>
                    <input id="vnpay-method" class="type-method" name="method" type="radio" /><label for="vnpay-method">Cổng thanh toán VNPAYQR</label>
                    <br />
                    <input id="momo-method" class="type-method" name="method" type="radio" /><label for="momo-method">Cổng thanh toán MomoQR</label>
                    <input id="cash-method" class="type-method" name="method" type="radio" /><label for="cash-method">Thanh toán khi nhận hàng</label>
                    <br />
                    <div class="vnpay-extend hide">
                        <br />
                        <p>Chọn kiểu thanh toán VNPay</p>
                        <input id="noi-dia" class="type-check" name="type" type="radio" checked /><label for="noi-dia">ATM-Tài khoản ngân hàng nội địa</label>
                        <br />

                        <input id="quoc-te" class="type-check" name="type" type="radio" /><label for="quoc-te">Thanh toán qua thẻ quốc tế</label>
                    </div>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button id="donate-btn" type="button" class="btn btn-primary">Xác nhận</button>
            </div>
        </div>
    </div>
</div>


<!-- Modal Thông báo-->
<div class="modal fade" id="exampleModal2" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            @if ((string)paymentStatus == "Fail")
            {
                <div class="modal-body text-center p-lg-4">
                    <svg style="width:50%" version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 130.2 130.2">
                        <circle class="path circle" fill="none" stroke="#db3646" stroke-width="6" stroke-miterlimit="10" cx="65.1" cy="65.1" r="62.1" />
                        <line class="path line" fill="none" stroke="#db3646" stroke-width="6" stroke-linecap="round" stroke-miterlimit="10" x1="34.4" y1="37.9" x2="95.8" y2="92.3" />
                        <line class="path line" fill="none" stroke="#db3646" stroke-width="6" stroke-linecap="round" stroke-miterlimit="10" x1="95.8" y1="38" X2="34.4" y2="92.2" />
                    </svg>
                    <h4 class="text-danger mt-3">Thanh toán thất bại</h4>
                    <p class="mt-3">Vui lòng thực hiện lại hoặc liên hệ hotline hỗ trợ!</p>
                </div>

            }
            else if ((string)paymentStatus == "Success")
            {
                <div class="modal-body text-center p-lg-4">
                    <svg style="width:50%" version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 130.2 130.2">
                        <circle class="path circle" fill="none" stroke="#198754" stroke-width="6" stroke-miterlimit="10" cx="65.1" cy="65.1" r="62.1" />
                        <polyline class="path check" fill="none" stroke="#198754" stroke-width="6" stroke-linecap="round" stroke-miterlimit="10" points="100.2,40.2 51.5,88.8 29.8,67.5 " />
                    </svg>
                    <h4 class="text-success mt-3">Thanh toán thành công</h4>
                    <p class="mt-3">Cảm ơn bạn đã đặt hàng tại shop!</p>
                </div>
            }
        </div>
    </div>
</div>

<div id="invoiceId" data-invoice-id="@invoiceId"></div>
<div id="paymentStatus" data-paymentStatus="@paymentStatus"></div>


<script>

    var confirmAddress = true
    const token = "af9239df-2402-11ef-8e53-0a00184fe694";
    @{
        var user = ViewData["user"] as DATN.Client.Models.UserInfo;
    }

        async function fetchPromotion(productId) {

            try {
                const response = await fetch(`https://localhost:7095/api/Promotion/GetPromotionByProductId/productId?productId=${productId}`);

                if (!response.ok) {
                    throw new Error('Failed to fetch promotion');
                }
                const promotion = await response.json();
                return promotion;
            } catch (error) {
                console.error('Error fetching promotion:', error);
                return null;
            }
        }

    //hiển thị Giỏ hàng
    async function showCart() {
        const cart = JSON.parse(localStorage.getItem(`giohang-${document.getElementsByClassName("user-email")[0].innerHTML}`)) || [];
        const cartul = document.querySelector('.listing-cart');
        let totalQuantity = 0;
        let totalPrice = 0;
        cartul.innerHTML = ''; // Xóa nội dung cũ để cập nhật lại

        for (const item of cart) {
            totalQuantity += item.soluong;

            // Lấy thông tin khuyến mãi cho từng sản phẩm
            const promotion = await fetchPromotion(item.ma);
            let discount = 0;
            let promotionInfo = 'Không có khuyến mãi';
            let finalPrice = item.giamoi; // Giá mặc định là giá gốc
            if (promotion && promotion.length > 0) {
                promotionInfo = promotion[0].name;
                discount = promotion[0].percent || 0; // Lấy phần trăm giảm giá
            }

            // Cập nhật tổng tiền: nếu có khuyến mãi, cộng giá sau khuyến mãi; nếu không, cộng giá gốc
            totalPrice += item.soluong * finalPrice;
            if (item.giamoi != item.dongia) {
                discount = item.dongia - item.giamoi;
            }
            // Thêm sản phẩm vào giỏ hàng
            cartul.innerHTML += `
                                                                            <li class="item-cart" data-id="${item.ma}-${item.maTTD}">
                                                                                <div class="imgsp">
                                                                                    <a>
                                                                                        <img src="${item.img}" alt="">
                                                                                    </a>
                                                                                    <div class="delete-button-container">
                                                                                            <a href="#" class="delete-button" data-id="${item.maTTD}">Xóa</a>
                                                                                    </div>
                                                                                </div>
                                                                                <div class="infosp">
                                                                                    <div class="name-price" style="align-items:baseline">
                                                                                        <div class="name-container">
                                                                                            <a>${item.ten}</a>
                                                                                                <br>
                                                                                                <span style="color:#777;font-size:14px" class="soluongconlai">Còn lại: ${item.soluongconlai}</span>
                                                                                         </div>
                                                                                        <div class="price-area">
                                                                                            <span class="final-price">${finalPrice.toLocaleString()} VNĐ</span>
                                                                                            ${discount != 0 ? `<br><span class="original-price">${item.dongia.toLocaleString()} VNĐ</span>` : ''}
                                                                                        </div>
                                                                                  </div>
                                                                                  <div class="promotion-info">
                                                                                        <span class="promotion-toggle" data-id="${item.ma}">Khuyến mãi</span>
                                                                                        <div class="promotion-details hidden">
                                                                                            <p>${promotionInfo}</p>
                                                                                        </div>
                                                                                  </div>
                                                                                  <div class="description-quantity">
                                                                                        <div class="description">
                                                                                            <span>
                                                                                                ${item.loaiTTD}:
                                                                                                    <span>${item.tenTTD}</span>
                                                                                            </span>
                                                                                        </div>
                                                                                        <div class="quantity">
                                                                                            <button class="decrease" data-id="${item.maTTD}">-</button>
                                                                                                <input readonly style="pointer-events: none;" type="number" class="quantitysp" value="${item.soluong}" max="${item.soluongconlai}" data-id="${item.maTTD}" min="0">
                                                                                            <button class="increase" data-id="${item.maTTD}">+</button>
                                                                                        </div>
                                                                                  </div>
                                                                                </div>
                                                                            </li>
                                                                        `;
        }

        // Hiển thị tổng số lượng và tổng tiền
        document.querySelector('.total-product span').textContent = `(${totalQuantity} sản phẩm)`;
        document.querySelector('.total-price').textContent = `${totalPrice.toLocaleString()} VNĐ`;
        document.querySelector('.pricetotal').textContent = `${totalPrice.toLocaleString()} VNĐ`;
        document.getElementById('voucherSelect').addEventListener('change', async function () {
            await updateCartSummary();
        });

        // Thêm sự kiện xóa cho các nút xóa
        document.querySelectorAll('.delete-button').forEach(button => {
            button.addEventListener('click', function (event) {
                event.preventDefault();
                const id = this.dataset.id;
                const confirmDelete = confirm("Bạn có chắc chắn muốn xóa sản phẩm này khỏi giỏ hàng?");
                if (confirmDelete) {
                    removeItem(id);
                }
            });
        });

        // Thêm sự kiện tăng giảm số lượng cho các nút
        document.querySelectorAll('.decrease').forEach(button => {
            button.addEventListener('click', async function () {
                const productId = this.dataset.id;
                const inputQuantity = document.querySelector(`.quantitysp[data-id="${productId}"]`);
                const currentQuantity = parseInt(inputQuantity.value);
                if (currentQuantity > 0) {
                    inputQuantity.value = currentQuantity - 1;
                    await updateCartItemQuantity(productId, currentQuantity - 1);
                    await updateCartSummary();
                }
            });
        });

        document.querySelectorAll('.increase').forEach(button => {
            button.addEventListener('click', async function () {
                const productId = this.dataset.id;
                const inputQuantity = document.querySelector(`.quantitysp[data-id="${productId}"]`);
                const currentQuantity = parseInt(inputQuantity.value);
                if (currentQuantity < parseInt(inputQuantity.getAttribute("max"))) {
                    inputQuantity.value = currentQuantity + 1;
                    await updateCartItemQuantity(productId, currentQuantity + 1);
                    await updateCartSummary();
                }
            });
        });

        // Thêm sự kiện cho phần khuyến mãi để mở rộng và thu gọn thông tin
        document.querySelectorAll('.promotion-toggle').forEach(toggle => {
            toggle.addEventListener('click', function () {
                const productId = this.dataset.id;
                const details = this.nextElementSibling;
                details.classList.toggle('hidden');
            });
        });
    }
    // Hàm xóa sản phẩm khỏi giỏ hàng và cập nhật lại giỏ hàng
    function removeItem(productId) {
        let cart = JSON.parse(localStorage.getItem(`giohang-${document.getElementsByClassName("user-email")[0].innerHTML}`)) || [];
        cart = cart.filter(item => item.maTTD != productId);
        localStorage.setItem(`giohang-${document.getElementsByClassName("user-email")[0].innerHTML}`, JSON.stringify(cart));
        showCart(); // Cập nhật lại giao diện giỏ hàng
        updateCartSummary()
    }
    // Hàm cập nhật số lượng sản phẩm trong giỏ hàng
    async function updateCartItemQuantity(productId, newQuantity) {
        let cart = JSON.parse(localStorage.getItem(`giohang-${document.getElementsByClassName("user-email")[0].innerHTML}`)) || [];
        let updatedCart = cart.map(item => {
            if (item.maTTD == productId) {
                item.soluong = newQuantity;
            }
            return item;
        });
        localStorage.setItem(`giohang-${document.getElementsByClassName("user-email")[0].innerHTML}`, JSON.stringify(updatedCart));
        // Sau khi cập nhật giỏ hàng, cần cập nhật lại tổng số lượng và tổng tiền
        await updateCartSummary();
    }
    async function updateCartSummary() {
        let cart = JSON.parse(localStorage.getItem(`giohang-${document.getElementsByClassName("user-email")[0].innerHTML}`)) || [];
        let totalQuantity = 0;
        let totalPrice = 0;

        // Tạo một mảng các promises cho việc lấy thông tin khuyến mãi
        // let promotionPromises = cart.map(item => fetchPromotion(item.ma));
        // let promotions = await Promise.all(promotionPromises);

        cart.forEach((item, index) => {
            totalQuantity += item.soluong;
            let finalPrice = parseFloat(item.giamoi);
            totalPrice += item.soluong * finalPrice;
        });

        // Cập nhật giao diện
        document.querySelector('.total-product span').textContent = `(${totalQuantity} sản phẩm)`;
        document.querySelector('.total-price').textContent = `${totalPrice.toLocaleString()} VNĐ`;

        if (!confirmAddress) {
            document.querySelector('.pricelast').textContent = `${((Number)(parseInt(document.querySelector('.totalprice').textContent.replace(/[^\d.-]/g, ''))) + (Number)(parseInt(document.querySelector('.shippingFee').textContent.replace(/[^\d.-]/g, '')))).toLocaleString()} VNĐ`;
        } else {
            document.querySelector('.pricelast').textContent = "Chưa chọn địa chỉ giao hàng";
        }


        // Cập nhật giá sau khi áp dụng khuyến mãi nếu có voucher
        const voucherSelect = document.getElementById('voucherSelect');
        if (voucherSelect) {
            const selectedOption = voucherSelect.options[voucherSelect.selectedIndex];
            const voucherId = parseFloat(selectedOption.getAttribute('id'));
            const percent = parseFloat(selectedOption.getAttribute('percent')) || 0;
            const price = parseFloat(selectedOption.getAttribute('price')) || 0;

            let finalAmount = totalPrice;

            if (percent > 0) {
                finalAmount -= (finalAmount * (percent / 100)).toFixed(0)
            } else {
                finalAmount -= price;
            }

            // Kiểm tra nếu giá trị là NaN
            if (isNaN(finalAmount)) {
                console.error('Final amount is NaN. Setting it to 0.');
                finalAmount = 0;
            }

            document.querySelector('.pricetotal').textContent = `${finalAmount.toLocaleString()} VNĐ`;

            if (!confirmAddress) {
                var total = ((Number)(finalAmount) + (Number)(parseInt(document.querySelector('.shippingFee').textContent.replace(/[^\d.-]/g, ''))))
                document.querySelector('.pricelast').textContent = `${total.toLocaleString()} VNĐ`;
            } else {
                document.querySelector('.pricelast').textContent = "Chưa chọn địa chỉ giao hàng";
            }


        }
    }
    function GetCartItem() {
        let cart = JSON.parse(localStorage.getItem(`giohang-${document.getElementsByClassName("user-email")[0].innerHTML}`)) || [];


        return cart.map(item => {
            return {
                productId: item.maTTD,
                quantity: item.soluong,
                oldPrice: item.dongia,
                newPrice: item.giamoi,
                giaNhap: item.gianhap
            };
        });
    }

    function ShowInputPmtCode() {
        var form = document.getElementById("promotioncodebox_input");
        var arrow = document.getElementById("arrow");
        form.classList.toggle("show");

        // Thay đổi mũi tên khi mở/đóng form
        if (form.classList.contains("show")) {
            arrow.innerHTML = "&#9650;"; // Mũi tên lên
        } else {
            arrow.innerHTML = "&#9660;"; // Mũi tên xuống
        }
    }
    // Hàm kiểm tra mã giảm giá
    function checkPromoCode() {
        var promoInput = document.getElementById("promo_code_input");
        var applyButton = document.getElementById("apply_button");
        if (promoInput.value.trim() != "") {
            applyButton.disabled = false;
            applyButton.style.backgroundColor = "#007bff"; // Màu xanh khi có mã giảm giá
        } else {
            applyButton.disabled = true;
            applyButton.style.backgroundColor = "#ccc"; // Màu xám đậm khi không có mã giảm giá
        }
    }
    // Hàm lấy danh sách sản phẩm trong giỏ hàng
    function GetItemList() {
        const items = JSON.parse(localStorage.getItem(`giohang-${document.getElementsByClassName("user-email")[0].innerHTML}`));
        const itemList = [];
        items.forEach(item => {
            const name = item.ten;
            const quantity = item.soluong;
            const height = 5;
            const width = 5;
            const length = 5;
            const weight = 5000;
            itemList.push({ name, quantity, height, width, length, weight });
        });
        return itemList;
    }
    // Hàm lấy số tiền thu hộ
    function GetCodAmount() {
        var cod = parseInt(document.querySelector('.pricetotal').textContent.replace(/[^\d.-]/g, ''));
        if (cod > 50000000) {
            cod = 50000000;
        };
        return cod;

    }
    async function CalculateShippingFee(paymentType) {
        for (var item of document.querySelectorAll(".address-input-select")) {
            if (item.selectedIndex == 0 || document.querySelector(".address-input-text").value.trim() == "") {
                alert("Vui lòng chọn địa chỉ trước khi xác nhận")
                return
            }

        }
        confirmAddress = !confirmAddress
        if (confirmAddress) {
            document.querySelector(".addAddress").innerHTML = "Xác nhận địa chỉ giao hàng"
            document.querySelector(".addAddress").style.backgroundColor = "#157347"
            for (var item of document.querySelectorAll(".address-input")) {
                item.disabled = false
            }
            document.getElementsByClassName("feeShipping")[0].innerHTML = `Chưa chọn địa chỉ giao hàng`
            document.getElementsByClassName("pricelast")[0].innerHTML = `Chưa chọn địa chỉ giao hàng`
            return
        }
        document.querySelector(".addAddress").innerHTML = "Chọn lại địa chỉ giao hàng"
        document.querySelector(".addAddress").style.backgroundColor = "#bc0f0f"
        for (var item of document.querySelectorAll(".address-input")) {
            item.disabled = true
        }
        const service_type_id = 5;
        const to_ward_code = wardSelect.value;
        const to_district_id = parseInt(districtSelect.value);
        var dataOrder = {
            to_ward_code: to_ward_code,
            service_type_id: service_type_id,
            to_district_id: to_district_id,
            weight: 5000,
            height: 5,
            width: 5,
            length: 5,
        }
        var a = GetOrderData(paymentType)
        try {
            const response = await fetch("https://dev-online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/fee", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Token": token,
                    "shop_Id": 192491,
                },
                body: JSON.stringify(a)
            });
            const text = await response.text();
            if (!response.ok) {
                throw new Error('Failed to get shipping fee');
            }
            const dataresponse = JSON.parse(text);
            var lastprice = parseInt(document.querySelector('.pricetotal').textContent.replace(/[^\d.-]/g, '')) + (Number)(dataresponse.data.total)
            document.getElementsByClassName("feeShipping")[0].innerHTML = `${dataresponse.data.total.toLocaleString()} VNĐ`
            document.querySelector('.pricelast').textContent = `${lastprice.toLocaleString()} VNĐ`;
            return dataresponse.data.total

        } catch {
            console.log("Loi")
            return "Reload"
        }
    }
    async function getLastPrice() {
        var itemPrice = GetCodAmount()
        var shipFee = await CalculateShippingFee()
        return (Number)(itemPrice) + (Number)(shipFee)
    }
    function GetOrderData(paymentMethod) {
        const to_name = document.getElementById("customerFirstName").value + ' ' + document.getElementById('customerLastName').value;
        const to_phone = document.getElementById("customerPhoneNumber").value;
        const to_address = document.getElementById("address").value;
        const required_note = 'CHOXEMHANGKHONGTHU'
        const to_ward_code = wardSelect.value;
        const service_type_id = 5;
        const to_district_id = parseInt(districtSelect.value);
        const items = GetItemList();
        const weightSummary = items.reduce((total, item) => total + item.weight * item.quantity, 0);
        const weight = 5000;
        const height = 5;
        const width = 5;
        const length = 5;
        const payment_type_id = 1;
        var cod_amount = 0;
        if (paymentMethod == 0) {
            cod_amount = GetCodAmount();
        }
        return {
            weight: weight,
            to_ward_code: to_ward_code,
            service_type_id: service_type_id,
            to_district_id: to_district_id,
            items: items,
            to_name: to_name,
            to_phone: to_phone,
            to_address: to_address,
            required_note: required_note,
            height: height,
            width: width,
            length: length,
            payment_type_id: payment_type_id,
            cod_amount: cod_amount
        };
    }
    // Hàm lấy thông tin hóa đơn
    function GetInvoiceData(paymentMethod) {

        const cart = JSON.parse(localStorage.getItem(`giohang-${document.getElementsByClassName("user-email")[0].innerHTML}`)) || [];
        const cartItems = GetCartItem();
        let voucherId = 0;
        let voucherSelect = document.getElementById('voucherSelect');
        if (voucherSelect) {
            let selectedOption = voucherSelect.options[voucherSelect.selectedIndex];
            voucherId = parseFloat(selectedOption.getAttribute('value'));
        }
        // const paymentMethod = getPaymentMethod();
        const paymentMethodMapping = {
            "Cash": 0,
            "MomoQR": 1,
            "VNPay": 2
        };
        const userId = '@user.UserId';
        // let totalAmount = 0;
        // for (const item of cart) {
        //     totalAmount += item.soluong * item.dongia;
        // }
        // const finalAmount = parseFloat(document.querySelector('.pricetotal').textContent.replace(/[^\d.-]/g, ''));
        // const discount = totalAmount - finalAmount;
        let orderData = GetOrderData(paymentMethod)
        return {
            cartItems,
            paymentMethod: paymentMethod,
            userId,
            voucherId: voucherId,
            pendingShippingOrder: {
                to_name: orderData.to_name,
                to_phone: orderData.to_phone,
                to_address: orderData.to_address.replace("-", ","),
                to_ward_code: orderData.to_ward_code,
                to_district_id: orderData.to_district_id.toString(),
                cod_amount: orderData.cod_amount.toString()
            }
            // totalAmount,
            // finalAmount,
            // discount
        }
    }
    // Hàm tạo đơn hàng
    async function CreateOrder(invoiceId) {
        const dataOrder = GetOrderData();
        try {
            const response = await fetch("https://dev-online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/create", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Token": token,
                    "shop_Id": 192491
                },
                body: JSON.stringify(dataOrder)
            });
            const text = await response.text();
            if (!response.ok) {
                throw new Error('Failed to create invoice');
            }
            const dataresponse = JSON.parse(text);
            const data = {
                ShippingOrderCode: dataresponse.data.order_code,
                CustomerId: '@user.UserId',
                InvoiceId: invoiceId,
                ShippingFee : dataresponse.data.total_fee
            }

            const ShippingOrder = await fetch("https://localhost:7095/api/ShippingOrder/Create", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(data)
            });
            if (!ShippingOrder.ok) {
                throw new Error('Failed to create invoice');
            }


        } catch (error) {
            console.error('Error creating CodOrder:', error);
            return null;
        }
    }
    //Hàm tạo hóa đơn
    async function CreateInvoice(paymentMethod) {
        const InvoiceData = GetInvoiceData(paymentMethod);
        console.log(InvoiceData)
        var invoiceId = 0;
        try {
            const response = await fetch('https://localhost:7095/api/Invoice/Create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(InvoiceData)
            });
            if (!response.ok) {
                throw new Error('Failed to create invoice');
            }
            const data = await response.json();
            console.log(data)
            if (data.status != "Pending" && data.status != "PaymentProcessing") {
                const shippingOrder = await CreateOrder(data.invoiceId);
            }
            return data;

        } catch (error) {
            console.error('Error creating invoice:', error);
            return null;
        }
    }
    document.addEventListener("DOMContentLoaded", function () {
        const provinceSelect = document.getElementById("provinceSelect");
        const districtSelect = document.getElementById("districtSelect");
        const wardSelect = document.getElementById("wardSelect");

        fetch("https://dev-online-gateway.ghn.vn/shiip/public-api/master-data/province", {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Token": token
            }
        })
            .then(response => response.json())
            .then(data => {
                if (data.code == 200) {
                    const provinces = data.data;
                    provinces.forEach(province => {
                        const option = document.createElement("option");
                        option.value = province.ProvinceID;
                        option.textContent = province.ProvinceName;
                        provinceSelect.appendChild(option);
                    });
                } else {
                    console.error("Failed to fetch provinces:", data.message);
                }
            })
            .catch(error => {
                console.error("Error fetching provinces:", error);
            });

        provinceSelect.addEventListener("change", function () {
            const selectedProvinceId = parseInt(this.value);
            districtSelect.innerHTML = '<option selected disabled hidden>Quận/Huyện</option>';
            wardSelect.innerHTML = '<option selected disabled hidden>Xã/Phường</option>';
            fetch(`https://dev-online-gateway.ghn.vn/shiip/public-api/master-data/district?province_id=${selectedProvinceId}`, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                    "Token": token
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.code == 200) {
                        const districts = data.data;
                        districts.forEach(district => {
                            const option = document.createElement("option");
                            option.value = district.DistrictID;
                            option.textContent = district.DistrictName;
                            districtSelect.appendChild(option);
                        });
                    } else {
                        console.error("Failed to fetch districts:", data.message);
                    }
                })
                .catch(error => {
                    console.error("Error fetching districts:", error);
                });
        });


        districtSelect.addEventListener("change", function () {
            const selectedDistrictId = parseInt(this.value);
            wardSelect.innerHTML = '<option selected disabled hidden>Xã/Phường</option>';
            fetch(`https://dev-online-gateway.ghn.vn/shiip/public-api/master-data/ward?district_id=${selectedDistrictId}`, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                    "Token": token
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.code == 200) {
                        const wards = data.data;
                        wards.forEach(ward => {
                            const option = document.createElement("option");
                            option.value = ward.WardCode;
                            option.textContent = ward.WardName;
                            wardSelect.appendChild(option);
                        });
                    } else {
                        console.error("Failed to fetch wards:", data.message);
                    }
                })
                .catch(error => {
                    console.error("Error fetching wards:", error);
                });
        });

    });
    // Hiển thị giỏ hàng khi trang được tải


    var typePayment = 0;
    var typeMethod = document.getElementsByClassName("type-method")
    var vnpayExtent = document.getElementsByClassName("vnpay-extend")[0]
    var qrImg;

    for (var type of typeMethod) {
        type.addEventListener("change", () => {
            var vnpayMethod = document.getElementsByClassName("type-method")[0]
            if (vnpayMethod.checked) {
                vnpayExtent.classList.remove("hide")
            } else {
                vnpayExtent.classList.add("hide")
            }
        })
    }
    document.querySelector(".submitorder").addEventListener("click", function () {
        if (document.querySelector('.pricetotal').textContent.replace(/[^\d.-]/g, '') == "0") {
            alert("Giỏ hàng đang trống")
            return
        }

        for (var item of document.querySelectorAll(".required-field")) {
            if (item.value.trim() == "") {
                alert("Vui lòng điền đầy đủ thông tin")
                return
            }
        }
        var phoneNumber = document.getElementById("customerPhoneNumber").value
        if (!validatePhoneNumber(phoneNumber)) {
            alert("Số điện thoại không hợp lệ")
            return
        }
        if (confirmAddress) {
            alert("Vui lòng chọn địa chỉ giao hàng")
            return
        } else {
            var myModal = new bootstrap.Modal(document.getElementById('exampleModal'));
            myModal.show();
        }
    })

    function validatePhoneNumber(phoneNumber) {
        // Biểu thức chính quy cho số điện thoại Việt Nam
        const vietnamPhoneNumberPattern = /^(0)(3[2-9]|5[6|8-9]|7[0|6-9]|8[1-9]|9[0-9])[0-9]{7}$/;

        return vietnamPhoneNumberPattern.test(phoneNumber);
    }

    document.addEventListener("DOMContentLoaded", async () => {
        var paymentStatus = document.getElementById('paymentStatus')
        if (paymentStatus.getAttribute('data-paymentStatus') == "Success") {
            var myModal = new bootstrap.Modal(document.getElementById('exampleModal2'))
            myModal.show()
            let invoiceId = document.getElementById('invoiceId').getAttribute('data-invoice-id');
            console.log(invoiceId)
            const dataOrder = localStorage.getItem("currentOrderData")
            const shippingFee = localStorage.getItem("currentShippingFee")
            try {
                const response = await fetch("https://dev-online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/create", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Token": token,
                        "shop_Id": 192491
                    },
                    body: dataOrder
                });
                const text = await response.text();
                // if (!response.ok) {
                //     try {
                //         var ghnResponse = JSON.parse(text)
                //         var dataGHN = {
                //             Note: `GHN: ${ghnResponse.message}`,
                //             InvoiceId: invoiceId
                //         }
                //         const responseIV = await fetch(`https://localhost:7095/api/invoice/update/${invoiceId}`, {
                //             method: 'PUT', // Phương thức PUT
                //             headers: {
                //                 'Content-Type': 'application/json'
                //             },
                //             body: JSON.stringify(dataGHN) // Chuyển đổi đối tượng JavaScript thành JSON
                //         });

                //         if (!responseIV.ok) {
                //             // Xử lý lỗi nếu phản hồi không thành công
                //             const errorData = await responseIV.text();
                //             throw new Error(`Error: ${responseIV.status} - ${errorData}`);
                //         }
                //         if (localStorage.getItem("currentVoucherId") != 0) {
                //             await fetch(`https://localhost:7095/api/Invoice/ChangeStatus?invoiceId=${invoiceId}&status=4&voucherId=${localStorage.getItem("currentVoucherId")}`)
                //         } else {
                //             await fetch(`https://localhost:7095/api/Invoice/ChangeStatus?invoiceId=${invoiceId}&status=4`)
                //         }
                //     } catch (error) {
                //         console.error('Failed to update invoice:', error.message);
                //     }
                // }else{
                const dataresponse = JSON.parse(text);
                const data = {
                    ShippingOrderCode: dataresponse.data.order_code,
                    CustomerId: '@user.UserId',
                    InvoiceId: invoiceId,
                    ShippingFee: shippingFee
                }
                const ShippingOrder = await fetch("https://localhost:7095/api/ShippingOrder/Create", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(data)
                });
                if (localStorage.getItem("currentVoucherId") != 0) {
                    await fetch(`https://localhost:7095/api/Invoice/ChangeStatus?invoiceId=${invoiceId}&status=2&voucherId=${localStorage.getItem("currentVoucherId")}`)
                } else {
                    await fetch(`https://localhost:7095/api/Invoice/ChangeStatus?invoiceId=${invoiceId}&status=2`)
                }

                // }

                localStorage.removeItem("currentOrderData")
                localStorage.removeItem("currentVoucherId")
                localStorage.removeItem("currentShippingFee")
                localStorage.removeItem(`giohang-${document.getElementsByClassName("user-email")[0].innerHTML}`);

                setTimeout(function () {
                    // Thực hiện lệnh sau khi đợi 2 giây
                    window.location.href = '/Home/Index';
                }, 2000);



            } catch (error) {
                console.error('Error creating CodOrder:', error);
                return null;
            }
        } else if (paymentStatus.getAttribute('data-paymentStatus') == "Fail") {
            var myModal = new bootstrap.Modal(document.getElementById('exampleModal2'))
            myModal.show()


            let invoiceId = document.getElementById('invoiceId').getAttribute('data-invoice-id');
            if (localStorage.getItem("currentVoucherId") != 0) {
                await fetch(`https://localhost:7095/api/Invoice/ChangeStatus?invoiceId=${invoiceId}&status=5&voucherId=${localStorage.getItem("currentVoucherId")}`)
            } else {
                await fetch(`https://localhost:7095/api/Invoice/ChangeStatus?invoiceId=${invoiceId}&status=5`)
                console.log("1")
            }
            await fetch(`https://localhost:7095/api/Invoice/ChangeStatus2?invoiceId=${invoiceId}`)
            localStorage.removeItem("currentOrderData")
            localStorage.removeItem("currentVoucherId")
            localStorage.removeItem("currentShippingFee")
            setTimeout(function () {
                // Thực hiện lệnh sau khi đợi 2 giây
                window.location.href = '/Cart/Index';
            }, 2000);

            // await fetch(`https://localhost:7095/api/Invoice/ChangeStatus?invoiceId=${invoiceId}&status=5`)
        }
        var cartResult = JSON.parse(localStorage.getItem(`giohang-${document.getElementsByClassName("user-email")[0].innerHTML}`))
        if (cartResult != null) {
            let cart = Object.entries(JSON.parse(localStorage.getItem(`giohang-${document.getElementsByClassName("user-email")[0].innerHTML}`)))
            for (var [index, value] of cart) {
                var data = await fetch(`https://localhost:7095/api/ProductAtribute/GetDataCustomById?productAttributeId=${value.maTTD}`)
                var ttd = await data.json()
                cartResult[index].dongia = ttd.salePrice
                cartResult[index].giamoi = ttd.afterDiscountPrice
                cartResult[index].img = ttd.product.imagePath
                cartResult[index].soluong = ttd.quantity < cartResult[index].soluong ? ttd.quantity : cartResult[index].soluong
                cartResult[index].soluongconlai = ttd.quantity
                cartResult[index].ten = ttd.product.name
                cartResult[index].tenTTD = ttd.attributeValue.value
                cartResult[index].loaiTTD = ttd.attributeValue.attributes.name
            }
            localStorage.setItem(`giohang-${document.getElementsByClassName("user-email")[0].innerHTML}`, JSON.stringify(cartResult))
            showCart()
        }
    })
    // showCart();

    document.querySelector("#donate-btn").addEventListener("click", async function () {
        var btns = document.getElementsByClassName("type-check")
        var money = parseInt(document.querySelector('.pricelast').textContent.replace(/[^\d.-]/g, ''));
        var vnpayMethod = document.getElementsByClassName("type-method")[0]
        var momoMethod = document.getElementsByClassName("type-method")[1]
        var cashMethod = document.getElementsByClassName("type-method")[2]

        let voucherId = 0;
        let voucherSelect = document.getElementById('voucherSelect');
        if (voucherSelect) {
            let selectedOption = voucherSelect.options[voucherSelect.selectedIndex];
            voucherId = parseFloat(selectedOption.getAttribute('value'));
        }

        if (vnpayMethod.checked) {
            for (var button of btns) {
                if (button.checked) {
                    type = Array.from(btns).indexOf(button) + 1
                }
            }
            const invoice = await CreateInvoice(2);
            localStorage.setItem("currentOrderData", JSON.stringify(GetOrderData()))
            localStorage.setItem("currentVoucherId", voucherId)
            localStorage.setItem("currentShippingFee", parseInt(document.querySelector('.feeShipping').textContent.replace(/[^\d.-]/g, '')))

            window.location.href = `/Cart/Pay?typePayment=${type}&money=${money}&invoiceId=${invoice.invoiceId}`
        } else if (momoMethod.checked) {
            const data = {
                accountNo: "0862559892",
                accountName: "Nguyen Dang Cong Minh",
                acqId: 970422,
                amount: money,
                addInfo: "Tiền đơn hàng",
                format: "text",
                template: "print"
            };
            const options = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            };
            fetch("https://api.vietqr.io/v2/generate", options)
                .then(response => response.json())
                .then(data => {
                    qrImg = data.data.qrDataURL
                    document.getElementsByClassName("model-body-1")[0].style.display = "none"
                    var imgNode = document.createElement("img")
                    imgNode.style.width = "100%"
                    imgNode.style.height = "70vh"
                    document.getElementsByClassName("modal-body")[0].appendChild(imgNode)
                    imgNode.setAttribute("src", qrImg)

                    document.getElementById("donate-btn").style.display = "none"
                    var backBtnNode = document.createElement("button")
                    backBtnNode.classList.add("btn")
                    backBtnNode.classList.add("btn-primary")
                    backBtnNode.setAttribute("id", "back-btn")
                    backBtnNode.innerHTML = "Quay lại"
                    backBtnNode.addEventListener("click", () => {
                        document.getElementsByClassName("modal-body")[0].removeChild(imgNode)
                        document.getElementsByClassName("model-body-1")[0].style.display = "block"
                        document.getElementsByClassName("modal-footer")[0].removeChild(backBtnNode)
                        document.getElementById("donate-btn").style.display = "block"

                    })
                    document.getElementsByClassName("modal-footer")[0].appendChild(backBtnNode)

                })

        } else if (cashMethod.checked) {
            const confirmOrder = confirm("Bạn có chắc chắn muốn đặt hàng?");
            if (confirmOrder) {
                const invoice = await CreateInvoice(0);
                if (invoice) {
                    alert('Đặt hàng thành công');
                    localStorage.removeItem(`giohang-${document.getElementsByClassName("user-email")[0].innerHTML}`);
                    window.location.href = '/Home/Index';
                } else {
                    alert('Đặt hàng thất bại');
                }
            }
        }

    });
</script>

<style>
    .original-price {
        color: black; /* Đặt màu chữ đen */
        text-decoration: line-through; /* Gạch ngang chữ */
    }
    /* Định dạng cho khuyến mãi */
    .promotion-info {
        font-size: 14px; /* Kích thước phông chữ tiêu chuẩn */
        color: #28a745; /* Màu xanh lá cây */
        font-family: Arial, sans-serif; /* Phông chữ phổ biến */
        margin-top: 5px; /* Tạo khoảng cách với phần trên */
    }

    /* Định dạng cho nút mở rộng/thu gọn khuyến mãi */
    .promotion-toggle {
        color: #007bff; /* Màu xanh lam */
        cursor: pointer; /* Con trỏ chuột biến thành tay chỉ */
        font-size: 14px; /* Kích thước phông chữ tiêu chuẩn */
        text-decoration: underline; /* Gạch chân để nhấn mạnh */
        display: inline-block; /* Hiển thị như một khối nội tuyến */
    }

    /* Định dạng cho chi tiết khuyến mãi */
    .promotion-details {
        font-size: 12px; /* Kích thước phông chữ nhỏ hơn */
        color: #333; /* Màu xám đậm */
        background: #f8f9fa; /* Nền màu xám nhạt */
        padding: 10px; /* Tạo khoảng cách bên trong */
        border-radius: 5px; /* Bo góc nhẹ */
        margin-top: 5px; /* Tạo khoảng cách với phần trên */
    }

        .promotion-details.hidden {
            display: none; /* Ẩn thông tin chi tiết khuyến mãi */
        }
</style>