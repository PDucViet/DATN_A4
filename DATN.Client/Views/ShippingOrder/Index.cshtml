<style>
    .container-content {
        height: 100%;
        width: 100%;
        display: block;
        justify-content: center;
        align-items: center;
        padding: 20px;
    }
    .tab-content {
        display: none;
    }

        .tab-content.active {
            display: block;
        }
        .bi-star-fill {
            font-size: 40px;
        }
    /* Định dạng cho phần tử bao ngoài của hóa đơn */
    .invoice {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

        /* Định dạng cho tiêu đề hóa đơn */
        .invoice h4 {
            font-size: 1.25rem;
            color: #343a40;
            margin-bottom: 10px;
            border-bottom: 1px solid #dee2e6;
            padding-bottom: 5px;
        }

        /* Định dạng cho thông tin chi tiết của hóa đơn */
        .invoice p {
            margin: 5px 0;
            font-size: 1rem;
            color: #495057;
        }

        /* Định dạng cho danh sách sản phẩm trong hóa đơn */
        .invoice ul {
            list-style-type: none;
            padding-left: 0;
            margin-top: 10px;
        }

            .invoice ul li {
                padding: 10px;
                background-color: #ffffff;
                border: 1px solid #e9ecef;
                border-radius: 5px;
                margin-bottom: 5px;
            }

        /* Định dạng cho phần tổng tiền và chiết khấu */
        .invoice p strong {
            font-size: 1.1rem;
            color: #007bff;
        }

        /* Định dạng cho phí giao hàng */
        .invoice p:last-of-type {
            margin-top: 15px;
            font-size: 1.1rem;
            color: #28a745;
            font-weight: bold;
        }

        /* Định dạng cho phần ghi chú */
        .invoice p:nth-of-type(4) {
            font-style: italic;
            color: #6c757d;
        }
    .nav-link.active {
        background-color: #007bff;
        color: white;
        border-radius: 8px;
    }

    /* Định dạng cho các liên kết trong tab */
    .nav-link {
        color: #007bff;
        font-weight: 500;
        margin-right: 10px;
    }

        .nav-link:hover {
            color: #0056b3;
            text-decoration: none;
        }

.rating-item {
    margin: 0 10px;
    }  
    .rated-star {
display: none !important;
    
    }
    ul.invoice-list {
        list-style-type: none;
        padding: 10px;
        margin: 0;
    }
    
.modal-body {
    padding: 3rem !important;
}
        ul.invoice-list li {
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-bottom: 10px;
            padding: 15px;
            background-color: #f9f9f9;
            position: relative;
        }

            ul.invoice-list li .toggle-details {
                cursor: pointer;
                color: #007bff;
                text-decoration: underline;
                position: absolute;
                right: 15px;
                top: 15px;
            }

    ul.invoice-details {
        list-style-type: none;
        padding: 0;
        margin: 10px 0 0 0;
        display: none;
    }
.product-named {
    font-size: 18px;
    font-weight: bold;
    line-height: 23px;
    margin: 20px 20px 0;
    }
        ul.invoice-details li {
            padding: 10px;
            background-color: #fff;
            border-top: 1px solid #ccc;
        }
        .fa-star {
            cursor: pointer;
        }
       .rating-sec {
           display: flex;
           justify-content: center;
           margin-top: 10px;
       }
    .hide {
        display: none;
    }
</style>
<div class="container-content">
    <ul class="nav nav-pills">
        <li class="nav-item">
            <a class="nav-link active" aria-current="page" href="#" data-target="tab1" data-status="1">Chờ xác nhận</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#" data-target="tab2" data-status="2">Đang vận chuyển</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#" data-target="tab3" data-status="0">Đã giao</a>
        </li>
        <li>
             <a class="nav-link" href="#" data-target="tab4" data-status="7">Đã hủy</a>
        </li>
    </ul>

    <div id="tab1" class="tab-content active"></div>
    <div id="tab2" class="tab-content"></div>
    <div id="tab3" class="tab-content"></div>
    <div id="tab4" class="tab-content"></div>
    <div class="modal fade justify-content-center align-items-center" id="WriteComment" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content modal-content-custom">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Đánh giá sản phẩm</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="product">
                        <div class="image text-center">
                            <img id="img-rater" style="width:100px ; width: 100px;" src="https://cdn.tgdd.vn/Products/Images/1983/67713/67713-600x600.jpg"/>
                            <h3 class="product-named" id="product-named"> Máy lạnh Toshiba Inverter </h3>
                        </div>
                        <div class="rating-sec">
                            <ul class="rating mt-2" style="display: flex; padding: 0px !important;">
                                <li class="rating-item text-center" data-param-star="1">
                                    <i class="fa-regular fa-star fa-2xl" id="1" style="color: #eaba0b;"></i>
                                    <i class="fa-solid fa-star fa-2xl rated-star" id="hidden_1" style="color: #eaba0b;display: none"></i>
                                    <p class="mt-2" id="text-star_1">Rất Tệ</p>
                                </li>
                                <li class="rating-item text-center" data-param-star="2">
                                    <i class="fa-regular fa-star fa-2xl" id="2" style="color: #eaba0b;"></i>
                                    <i class="fa-solid fa-star fa-2xl rated-star" id="hidden_2" style="color: #eaba0b;display: none"></i>
                                    <p class="mt-2" id="text-star_2"> Tệ</p>
                                </li>
                                <li class="rating-item text-center" data-param-star="3">
                                    <i class="fa-regular fa-star fa-2xl" id="3" style="color: #eaba0b;"></i>
                                    <i class="fa-solid fa-star fa-2xl rated-star" id="hidden_3" style="color: #eaba0b;display: none"></i>
                                    <p class="mt-2" id="text-star_3"> Tạm ổn</p>
                                </li>
                                <li class="rating-item text-center" data-param-star="4">
                                    <i class="fa-regular fa-star fa-2xl" id="4" style="color: #eaba0b;"></i>
                                    <i class="fa-solid fa-star fa-2xl rated-star" id="hidden_4" style="color: #eaba0b;display: none"></i>
                                    <p class="mt-2" id="text-star_4"> Tốt</p>
                                </li>
                                <li class="rating-item text-center" data-param-star="5">
                                    <i class="fa-regular fa-star fa-2xl" id="5" style="color: #eaba0b;"></i>
                                    <i class="fa-solid fa-star fa-2xl rated-star" id="hidden_5" style="color: #eaba0b;display: none"></i>
                                    <p class="mt-2 " id="text-star_5"> Rất tốt</p>
                                </li>

                            </ul>

                        </div>
                    </div>

                    <br/>
                    <div class="form-floating row">
                        <textarea class="form-control" required id="text-content" placeholder="Mời bạn chia sẻ thêm cảm nhận ..." style=" width: 100%"></textarea>
                    </div>
                    <br/>
                    <div class="gioithieu row">
                        <div class="form-check col-7">
                            <input class="form-check-input" type="checkbox" value="" id="">
                            <label class="form-check-label" for="flexCheckIndeterminate">
                                Tôi sẽ giới thiệu sản phẩm cho bạn bè, người thân
                            </label>

                        </div>
                        <div class="col-5">
                        </div>
                    </div>

                    <br/>
                    <div class="row d-flex">
                        <div class="col-6 mb-3 ps-0">
                            <input type="email" class="form-control" required id="exampleFormControlInput1" placeholder="Họ tên (bắt buộc)">
                        </div>
                        <div class="col-6 mb-3 pe-0">
                            <input type="email" class="form-control" required id="exampleFormControlInput1" placeholder="Số điện thoại (bắt buộc)">
                        </div>
                    </div>
                    <br/>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" value="" id="checked-policy">
                        <label class="form-check-label" for="flexCheckIndeterminate">
                            Tôi đồng ý với <a href="">Chính sách xử lý dữ liệu cá nhân</a> của Shop
                        </label>
                    </div>
                    <br/>
                    <div class="danhgia row">
                        <input type="text" class="form-control" hidden id="bind-prodId">
                        <input type="text" class="form-control" hidden id="bind-ratted-star">
                        <input type="text" class="form-control" hidden id="bind-invoiceDetailId">
                        <button type="submit" id="form-submit-comment" disabled class="btn btn-primary">Gửi đánh giá</button>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>


<script>
    const token = "af9239df-2402-11ef-8e53-0a00184fe694";
    @{
        var user = ViewData["user"] as DATN.Client.Models.UserInfo;
    }

        function toggleDetails(detailRowId) {
            var detailRow = document.getElementById(detailRowId);
            if (detailRow.style.display === "none" || !detailRow.style.display) {
                detailRow.style.display = "block";
            } else {
                detailRow.style.display = "none";
            }
        }
   
    async function FetchListOrderByUser() {
        try {

            var response = await fetch(`https://localhost:7095/api/ShippingOrder/GetByUserId?UserId=@user.UserId`);
            if (!response.ok) {
                throw new Error(response.statusText);
            }
            var data = await response.json();
            return data;
        }
        catch (e) {
            console.error('Error fetching OrderInfo:', e);
            return null;
        }
    }
    async function FetchOrderInfoGHN(orderCode) {
        try {
            var response = await fetch(`https://dev-online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/detail`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Token': token,
                },
                body: JSON.stringify({ order_code: orderCode })
            });
            if (!response.ok) {
                throw new Error(response.statusText);
            }
            var data = await response.json();
            console.log("Fetched orders:", data);
            return data;
        } catch (e) {
            console.error('Error fetching APIGHN:', e);
            return null;
        }
    }
    async function GetInvoiceById(invoiceId){
        try {
            var response = await fetch(`https://localhost:7095/api/Invoice/Get/${invoiceId}`);
            if (!response.ok) {
                throw new Error(response.statusText);
            }
            var data = await response.json();
            return data;
        } catch (e) {
            console.error('Error fetching Invoice:', e);
            return null;
        }
    }
    async function GetInvoiceByOrderCode(orderCode){
        try {
            var response = await fetch(`https://localhost:7095/api/ShippingOrder/GetByOrderCode?code=${orderCode}`);
            if (!response.ok) {
                throw new Error(response.statusText);
            }
            var data = await response.json();
            console.log(data);
            var invoice = await GetInvoiceById(data.invoiceId);
            return invoice;
        } catch (e) {
            console.error('Error fetching Invoice:', e);
            return null;
        }
    }
    async function GetInvoiceDetailByInvoiceId(invoiceId) {
        try {
            var response = await fetch(`https://localhost:7095/api/InvoiceDetail/GetByInvoiceId/${invoiceId}/@user.UserId`);
            if (!response.ok) {
                throw new Error(response.statusText);
            }
            var data = await response.json();
            console.log(data);
            return data;
        }
        catch {
            console.error('Error fetching InvoiceDetail:', e);
            return null;
        }
    }
    async function TakeShippingOrder(orderCode) {
        try {
            const token = "af9239df-2402-11ef-8e53-0a00184fe694";
            const response = await fetch('https://dev-online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/soc', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Token': token,
                },
                body: JSON.stringify({
                    "order_code": orderCode
                })
            });

            if (!response.ok) {
                throw new Error(response.statusText);
            }

            const data = await response.json();
            console.log("dataOrder:",data);
            if (data.data && data.data.payment && data.data.payment.length > 0) {
                // Lấy giá trị `value` từ phần tử đầu tiên trong `payment`
                const paymentValue = data.data.payment[0].value;
                console.log("paymentValue:", paymentValue); // Log giá trị ra để kiểm tra
                return paymentValue;
            } else {
                throw new Error('Không có dữ liệu `payment` hoặc `value`');
            }
        } catch (e) {
            console.error('Lỗi khi lấy phí ship:', e);
            return null;
        }
    }
    async function FetchProduct(productId) {
        try {
            var response = await fetch(`https://localhost:7095/api/Product/Get/${productId}`);
            if (!response.ok) {
                throw new Error(response.statusText);
            }
            var data = await response.json();
            return data; // Assuming the product name is returned in the `name` field
        } catch (e) {
            console.error('Error fetching product:', e);
            return null;
        }
    }
    async function FetchVoucherById(Id){
        try {
            var response = await fetch(`https://localhost:7095/api/VoucherUser/GetVoucherCustom?id=${Id}`);
            if (!response.ok) {
                throw new Error(response.statusText);
            }
            var data = await response.json();
            return data;
        } catch (e) {
            console.error('Error fetching Voucher:', e);
            return null;
        }
    }
    async function fetchOrdersByStatus(status, target) {
        try {
            var orders = await FetchListOrderByUser();
            let content = `<ul class="invoice-list">`;

            if (!orders || orders.length === 0) {
                target.innerHTML = `<p style="color: #ff0000; font-weight: bold; text-align: center;">Không có đơn hàng.</p>`;
                return;
            }

            let hasOrders = false;

            for (let i = 0; i < orders.length; i++) {
                let item = orders[i];
                if (!item.orderCode) {
                    continue; // Skip items without orderCode
                }

                let orderDetails = await FetchOrderInfoGHN(item.orderCode);
                let shippingFee = await TakeShippingOrder(item.orderCode);
                let invoice = await GetInvoiceByOrderCode(item.orderCode);
                console.log(invoice);
                console.log(shippingFee)
                if (!invoice || !invoice.invoiceId) {
                    continue; // Skip items without invoiceId
                }

                let invoiceDetails = await GetInvoiceDetailByInvoiceId(invoice.invoiceId);

                if (orderDetails && orderDetails.data.status === status) {
                    hasOrders = true;
                    let totalAmount = 0;

                    if (invoiceDetails) {
                        invoiceDetails.forEach(detail => {
                            totalAmount += detail.newPrice * detail.quantity;
                        });
                        totalAmount += shippingFee;
                    }

                    // Apply voucher discount if available
                    if (invoice.voucherUserId) {
                        var voucher = await FetchVoucherById(invoice.voucherUserId);
                        console.log(voucher);
                        if (voucher.voucher.discountByPercent) {
                            totalAmount -= totalAmount * (voucher.voucher.discountByPercent / 100);
                        } else if (voucher.voucher.discountByPrice) {
                            totalAmount -= voucher.voucher.discountByPrice;
                        }
                    }

                    content += `<li>
                                    <div>
                                        <strong>Mã hóa đơn:</strong> ${invoice.invoiceId} <br>
                                        <strong>Ngày tạo:</strong> ${new Date(invoice.createDate).toLocaleDateString('vi-VN')} <br>
                                        <span class="toggle-details" onclick="toggleDetails('details-${item.orderCode}')">Xem chi tiết</span>
                                    </div>
                                    <ul id="details-${item.orderCode}" class="invoice-details">`;

                    if (invoiceDetails) {
                        invoiceDetails.forEach(detail => {
                            content += `<li>
                                            <strong>Tên sản phẩm:</strong> ${detail.productAttribute.product.name} <br>
                                            <strong>Số lượng:</strong> ${detail.quantity} <br>
                                            <strong>Giá:</strong> ${detail.newPrice.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}
                                        </li>`;
                        });
                    }

                    content += `</ul>
                                <strong>Mã đơn hàng:</strong> ${orderDetails.data.order_code} <br>
                                <strong>Trạng thái:</strong> ${orderDetails.data.status} <br>
                                <strong>Địa chỉ:</strong> ${orderDetails.data.to_name} - ${orderDetails.data.to_phone} - ${orderDetails.data.to_address} <br>
                                <strong>Phí ship:</strong> ${shippingFee.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })} <br>
                                <strong>Tổng số tiền:</strong> ${totalAmount.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}
                            </li>`;
                }
            }

            if (!hasOrders) {
                content = `<p style="color: #ff0000; font-weight: bold; text-align: center;">Không có đơn hàng.</p>`;;
            }

            content += `</ul>`;
            target.innerHTML = content;
        } catch (error) {
            console.error("Error fetching orders:", error);
            target.innerHTML = `<p>Đã xảy ra lỗi khi tải đơn hàng.</p>`;
        }
    }

    // window.onload = function () {
    //     fetchAndDisplayInvoices('1', document.getElementById('tab1'));
    // }
    async function fetchAndDisplayInvoices(status, targetId) {
        try {
            const response = await fetch(`https://localhost:7095/api/Invoice/GetInvoiceByStatusAndUserId/@user.UserId/${status}`);
            const invoices = await response.json();

            const tabContent = document.getElementById(targetId);
            tabContent.innerHTML = '';

            if (invoices.length === 0) {
                tabContent.innerHTML = '<p style="text-align: center; padding: 20px; background-color: #f8f9fa; color: #6c757d; border-radius: 5px;">Không có hóa đơn.</p>'
                return;
            }
            invoices.forEach(invoice => {
                let totalAmount = 0;
                let discount = 0;
                let shippingFee = 0;
                if (invoice.invoiceDetails) {
                    invoice.invoiceDetails.forEach(detail => {
                        totalAmount += detail.newPrice * detail.quantity;
                    }); 
                }
                if (invoice.voucherUser) {                   
                    if (invoice.voucherUser.voucher.discountByPercent) {
                        discount += totalAmount * (invoice.voucherUser.voucher.discountByPercent)/100;                        
                    }
                    if (invoice.voucherUser.voucher.discountByPrice) {
                        discount += invoice.voucherUser.voucher.discountByPrice;                                          
                    }
                }
                totalAmount -= discount;
                // Thêm phí vận chuyển
                if (invoice.shippingOrder) {
                    shippingFee += invoice.shippingOrder.price;
                }
                totalAmount+= shippingFee
                const invoiceElement = document.createElement('div');
                invoiceElement.className = 'invoice';
                invoiceElement.innerHTML = `
                    <h4>Hóa đơn #${invoice.invoiceId}</h4>
                    <p>Ngày tạo: ${new Date(invoice.createDate).toLocaleDateString()}</p>
                    <p>Trạng thái: ${invoice.status}</p>
                    <p>Ghi chú: ${invoice.note || 'Không có'}</p>
                    <p><strong>Chi tiết hóa đơn:</strong></p>
                    <ul>
                        ${invoice.invoiceDetails.map(detail => `
                            <li>
                                    Sản phẩm: ${detail.productAttribute.product.name} - Số lượng: ${detail.quantity} - Giá: ${detail.newPrice.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}
                                                <button type="button" class="btn btn-primary ms-2 btn-show-write-comment ${detail.isShowComment == true && status == 0 ? "show" : "hide"}"   data-param-name="${detail.productAttribute.product.name}" data-param-img="${detail.imagePath}"  data-param-prodid="${detail.productAttribute.productId}" data-param-invoiceDetailId="${detail.invoiceDetailId}" data-bs-toggle="modal" data-bs-target="#WriteComment">Viết đánh giá</button>

                            </li>
                        `).join('')}
                    </ul>
                        <p>Phí giao hàng: ${shippingFee.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}</p>
                        <p>Chiết khấu: ${discount.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}</p>
                        <p>Tổng số tiền: ${totalAmount.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}</p>
                `;
                tabContent.appendChild(invoiceElement);
            });
        } catch (error) {
            console.error('Lỗi khi lấy hóa đơn:', error);
        }
    }
    document.addEventListener('DOMContentLoaded', () => {
        // Fetch initial invoices for the first tab
        fetchAndDisplayInvoices('1', 'tab1');

        const tabs = document.querySelectorAll('.nav-link');

        tabs.forEach(tab => {
            tab.addEventListener('click', async (event) => {
                event.preventDefault();

                // Remove active class from all tabs and tab contents
                tabs.forEach(t => t.classList.remove('active'));
                document.querySelectorAll('.tab-content').forEach(tc => tc.classList.remove('active'));

                // Add active class to the clicked tab and corresponding tab content
                tab.classList.add('active');
                const targetId = tab.getAttribute('data-target');
                const targetElement = document.getElementById(targetId);

                // Kiểm tra xem phần tử với targetId có tồn tại không
                if (!targetElement) {
                    console.error(`Không tìm thấy phần tử với id: ${targetId}`);
                    return;
                }

                targetElement.classList.add('active');

                // Fetch data and display
                const status = tab.getAttribute('data-status');
                await fetchAndDisplayInvoices(status, targetId);
            });
        });
    });


    $('.rating-item').on('click', function() {
        var paramStar = $(this).data('param-star');
        $('#bind-ratted-star').val(paramStar);
        for (let i=1;i<=5;++i){
        if (i>paramStar){
            var hiddenStar= document.getElementById(i);
            hiddenStar.style.setProperty("display", "block", "important");
            hiddenStar.style.marginBottom="20px";
            hiddenStar.style.marginTop="20px";
            
            var hiddenStarFilled= document.getElementById("hidden_"+i);
            hiddenStarFilled.style.removeProperty("display");
            hiddenStarFilled.style.display="none";

            var text_star= document.getElementById("text-star_"+i);
            text_star.style.color="#333333";
            text_star.style.fontWeight="100";
        }
        else {
            var hiddenStar= document.getElementById(i);
            hiddenStar.style.display="none";
            
            var hiddenStarFilled= document.getElementById("hidden_"+i);
            hiddenStarFilled.style.removeProperty("display");
            hiddenStarFilled.style.setProperty("display", "block", "important");
            hiddenStarFilled.style.marginBottom="20px";
            hiddenStarFilled.style.marginTop="20px";
            
            var text_star= document.getElementById("text-star_"+i);
            text_star.style.color="#333333";
            text_star.style.fontWeight="100";
           
        }
        }
        var hiddenStarChoose= document.getElementById(paramStar);
        hiddenStarChoose.style.display="none";
        var hiddenStarFilled= document.getElementById("hidden_"+paramStar);
        hiddenStarFilled.style.removeProperty("display");
        hiddenStarFilled.style.setProperty("display", "block", "important");
        hiddenStarFilled.style.marginBottom="20px";
        hiddenStarFilled.style.marginTop="20px";

        var text_star= document.getElementById("text-star_"+paramStar);
        text_star.style.color="#ff9f00";
        text_star.style.fontWeight="bold";
        var checkedPolicy= document.getElementById('checked-policy').checked;
        console.log(checkedPolicy);
        var buttonSubmit= document.getElementById('form-submit-comment');
        if (checkedPolicy){
            buttonSubmit.disabled=false;
        }
        else {
            buttonSubmit.disabled=true;

        }
    });
    $('#checked-policy').on('change', function() {
        var selectedOption= document.getElementById('checked-policy').checked;
        var buttonSubmit= document.getElementById('form-submit-comment');
        var rattedStar=  $('#bind-ratted-star').val() || 0;
        if (selectedOption && rattedStar>0){
    buttonSubmit.disabled=false;
}
else {
    buttonSubmit.disabled=true;
}
      
    });
    $('#form-submit-comment').on('click', function() {
    
        var content= $('#text-content').val();
        if (content.trim()!=''){
         var prodId= $('#bind-prodId').val();
        var rattedStar=  $('#bind-ratted-star').val();
        var invoiceDetailId=  $('#bind-invoiceDetailId').val();
        $.ajax({
            url: '@Url.Action("WriteComment", "ShippingOrder")', // Adjust controller and action as needed
            type: 'POST',
            data: {
                Content:content,
                RattedStar:rattedStar,
                ProductId:prodId,
                InvoiceDetailId:invoiceDetailId,
            },
            success: function (response) {
               window.location.href=`/Product/ViewAllComment?id=${response.prodId}`
            },
            error: function (xhr, status, error) {

            }
        });
        }
    });
    $(document).ready(function() {
    $('#text-content').placeholder="Mời bạn chia sẻ thêm cảm nhận ...";
    // Event listener for when the modal is about to be shown
    $('#WriteComment').on('show.bs.modal', function (event) {
    
        var button = $(event.relatedTarget);
        var valueName = button.data('param-name');
        var valueImg = button.data('param-img');
        var valueProdId = button.data('param-prodid');
        var valueInvoiceDetailId = button.data('param-invoicedetailid');
        
        $('#product-named').text(valueName);
        $('#bind-prodId').val(valueProdId);
        $('#bind-invoiceDetailId').val(valueInvoiceDetailId);
        $('#img-rater').attr('src', `${valueImg}`);
        
    })
    });
</script>